strip.placement = "outside",
strip.background = element_rect(fill=NA, colour="grey50"),
legend.position="none",
axis.text.x=element_text(face = "bold",size=12),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
# axis.line.y = element_blank(),
axis.line.x = element_blank()
)
p = test %>%
ggplot(aes(x=BPcum,y=-log10(pval),text=text,color=cat,size=-log10(pval))) +
geom_point(alpha = 0.75) +
# geom_rug(sides = 'b',length = unit(0.05, "npc")) +
# facet_grid(. ~ cat, space="free_x", scales="free_x", switch="x") +
scale_x_continuous(expand = c(0,0), label = X_axis$cat, breaks = X_axis$center) +
scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) +
scale_size_continuous(range = c(0.5,3)) +
geom_hline(yintercept = -log10(sig), color = "grey40", linetype = "dashed") +
theme_classic() +
theme(
strip.placement = "outside",
strip.background = element_rect(fill=NA, colour="grey50"),
legend.position="none",
axis.text.x=element_text(face = "bold",size=12),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
# axis.line.y = element_blank(),
axis.line.x = element_blank()
)
ggplotly(p, tooltip="text")
data <- read_csv("/Users/jeancheng/Documents/RNAseq/COVID19/GSE152075_400COVID/GSEA_POSvsNEG/COVID19POS_vs_NEG_KEGG-WkPt-RctP.csv")
str(head(data))
data = data %>% dplyr::arrange(pathway)
size_g = unlist(lapply(data[[ncol(data)]], function(x) length(x)))
data = data %>% rowwise() %>% dplyr::mutate(cat=strsplit(pathway,"_")[[1]][[1]])
data$text = paste0("<b>",data$pathway,"</b>\n",
"ES=",signif(data[["ES"]],digits=3),"; ",
"P=",signif(data[["pval"]],digits=3),"; ",
"P.adj=",signif(data[["padj"]],digits=3),"\n",
tail(colnames(data),n=1)," (",size_g,"/",data[["size"]],"): \n",addlinebreaks_vis(data[[ncol(data)]])
)
test = data %>%
# Compute chromosome size
dplyr::group_by(cat) %>%
dplyr::summarise(chr_len=n()) %>%
# Calculate cumulative position of each cat
dplyr::mutate(tot=cumsum(chr_len)-chr_len) %>%
dplyr::select(-chr_len) %>%
# Add this info to the initial dataset
dplyr::left_join(data, ., by=c("cat"="cat")) %>%
dplyr::arrange(cat) %>%
dplyr::group_by(cat) %>%
dplyr::mutate(BPcum=1:n()+tot-1)
X_axis = test %>% dplyr::group_by(cat) %>% dplyr::summarize(center=(max(BPcum) +min(BPcum) ) / 2 )
sig = 0.005
ylim <- abs(floor(log10(min(data[["pval"]]))))
p = test %>%
ggplot(aes(x=BPcum,y=-log10(pval),text=text,color=cat,size=-log10(pval))) +
geom_point(alpha = 0.75) +
# geom_rug(sides = 'b',length = unit(0.05, "npc")) +
# facet_grid(. ~ cat, space="free_x", scales="free_x", switch="x") +
scale_x_continuous(expand = c(0,0), label = X_axis$cat, breaks = X_axis$center) +
scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) +
scale_size_continuous(range = c(0.5,3)) +
geom_hline(yintercept = -log10(sig), color = "grey40", linetype = "dashed") +
theme_classic() +
theme(
strip.placement = "outside",
strip.background = element_rect(fill=NA, colour="grey50"),
legend.position="none",
axis.text.x=element_text(face = "bold",size=12),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
# axis.line.y = element_blank(),
axis.line.x = element_blank()
)
ggplotly(p, tooltip="text")
p = test %>%
ggplot(aes(x=BPcum,y=-log10(pval),text=text,color=cat,size=-log10(pval))) +
geom_point(alpha = 0.75) +
# geom_rug(sides = 'b',length = unit(0.05, "npc")) +
# facet_grid(. ~ cat, space="free_x", scales="free_x", switch="x") +
scale_x_continuous(expand = c(0,0), label = X_axis$cat, breaks = X_axis$center) +
scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) +
scale_size_continuous(range = c(0.5,3)) +
geom_hline(yintercept = -log10(sig), color = "grey40", linetype = "dashed") +
theme_classic() +
theme(
strip.placement = "outside",
strip.background = element_rect(fill=NA, colour="grey50"),
legend.position="none",
axis.text.x=element_text(face = "bold",size=12,angle=45,hjust=1,vjust=1),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
# axis.line.y = element_blank(),
axis.line.x = element_blank()
)
ggplotly(p, tooltip="text")
p = test %>%
ggplot(aes(x=BPcum,y=-log10(pval),text=text,color=cat,size=-log10(pval))) +
geom_point(alpha = 0.75) +
# geom_rug(sides = 'b',length = unit(0.05, "npc")) +
# facet_grid(. ~ cat, space="free_x", scales="free_x", switch="x") +
scale_x_continuous(expand = c(0,0), label = X_axis$cat, breaks = X_axis$center) +
scale_y_continuous(expand = c(0,0), limits = c(0, ylim)) +
scale_size_continuous(range = c(0.5,3)) +
geom_hline(yintercept = -log10(sig), color = "grey40", linetype = "dashed") +
theme_classic() +
theme(
strip.placement = "outside",
strip.background = element_rect(fill=NA, colour="grey50"),
legend.position="none",
axis.text.x=element_text(face = "bold",size=12), #,angle=45,hjust=1,vjust=1
axis.title.x = element_blank(),
axis.ticks = element_blank(),
# axis.line.y = element_blank(),
axis.line.x = element_blank()
)
ggplotly(p, tooltip="text")
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
runApp('Documents/easyGSEA_v2/GSEA_part_v5')
shiny::runApp('Documents/easyGSEA/GSEA_part')
runApp('Documents/easyGSEA/GSEA_part')
runApp('Documents/easyGSEA/GSEA')
runApp('Documents/easyGSEA/GSEA')
runApp('Documents/easyGSEA/GEO_part')
runApp('Documents/easyGSEA/DEG_part')
runApp('Documents/easyGSEA/DEG')
runApp('Documents/easyGSEA/DEG')
runApp('Documents/easyGSEA/GEO')
runApp('Documents/easyGSEA_gallery/easyGSEA_v2/GSEA_part')
runApp('Documents/easyGSEA_gallery/easyGSEA_v2/GSEA_part')
shiny::runApp('Documents/Darwin/easyGSEA')
shiny::runApp('Documents/Darwin/easyGSEA')
shiny::runApp('Documents/Darwin/easyGSEA')
shiny::runApp('Documents/Darwin/easyGSEA')
shiny::runApp('Documents/Darwin/easyGSEA')
shiny::runApp('Documents/Darwin/easyGSEA')
shiny::runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
runApp('Documents/Darwin/easyGSEA')
shiny::runApp('Documents/eVITTA/easyGSEA')
shiny::runApp('Documents/eVITTA/easyGSEA')
shiny::runApp('Documents/eVITTA/easyGSEA')
shiny::runApp('Documents/eVITTA/easyGSEA')
shiny::runApp('Documents/eVITTA/easyGSEA')
shiny::runApp('Documents/eVITTA/easyGSEA')
shiny::runApp('Documents/eVITTA/easyGSEA')
shiny::runApp('Documents/eVITTA/easyGSEA')
shiny::runApp('Documents/eVITTA/easyGSEA')
shiny::runApp('Documents/eVITTA/easyGSEA')
shiny::runApp('Documents/eVITTA/easyGSEA')
shiny::runApp('Documents/eVITTA/easyGSEA')
shiny::runApp('Documents/eVITTA/easyGSEA')
shiny::runApp('Documents/eVITTA/easyGSEA')
shiny::runApp('Documents/eVITTA/easyGSEA')
# change to working directory
setwd("/home/eVITTA/ShinyApps/easyGSEA/www/gmts")
# change to working directory
setwd("/Users/jeancheng/Documents/eVITTA/easyGSEA/www/gmts")
date = "20200805"
# species list
species_names <- list(
"Bos taurus" = "bta",
"Caenorhabditis elegans" = "cel",
"Canis lupus familiaris" = "cfa",
"Danio rerio" = "dre",
"Drosophila melanogaster" = "dme",
"Gallus gallus" = "gga",
"Homo sapiens" = "hsa",
"Mus musculus" = "mmu",
"Rattus norvegicus" = "rno",
"Saccharomyces cerevisiae" = "sce",
"Sus scrofa" = "ssc"
)
# function to change between abbr and full names
species_translate <- function(x,source_list = species_names){
if(nchar(x)>4){
translated <- source_list[x][[1]]
}else if(nchar(x)<=4){
translated <- names(source_list)[which(source_list == x)]
}else{
translated <- NULL
}
return(translated)
}
system("tar -xzf pscan_files.tar.gz")
system("rm pscan_files.tar.gz")
tf2dna_species = c("cel","dme","hsa","mmu","sce")
for(i in tf2dna_species){
odir = paste0(getwd(),"/",i,"/07_Other/")
dir.create(file.path(odir), showWarnings = FALSE)
ofile = paste0(odir,"TF2DNA",date,".gmt")
system(paste0("rm ",ofile))
i = species_translate(i)
i = gsub(" ","-",i)
in_dir = paste0("pscan_files/",i,"*/*pscan")
in_files = system(paste0("ls ",in_dir), intern = TRUE)
for(infile in in_files){
gene = basename(infile) %>% gsub("\\.pscan$","",.)
data <- read_delim(infile,delim = "\t")
genes = data$target_name %>% paste(.,collapse = "\t")
oline = paste0(gene,"\t",alink,"\t",genes)
write(oline,ofile,append = T)
}
}
library(tidyverse)
for(i in tf2dna_species){
odir = paste0(getwd(),"/",i,"/07_Other/")
dir.create(file.path(odir), showWarnings = FALSE)
ofile = paste0(odir,"TF2DNA",date,".gmt")
system(paste0("rm ",ofile))
i = species_translate(i)
i = gsub(" ","-",i)
in_dir = paste0("pscan_files/",i,"*/*pscan")
in_files = system(paste0("ls ",in_dir), intern = TRUE)
for(infile in in_files){
gene = basename(infile) %>% gsub("\\.pscan$","",.)
data <- read_delim(infile,delim = "\t")
genes = data$target_name %>% paste(.,collapse = "\t")
oline = paste0(gene,"\t",alink,"\t",genes)
write(oline,ofile,append = T)
}
}
#============TF2DNA==============
alink = "http://fiserlab.org/pscan_files.tar.gz"
for(i in tf2dna_species){
odir = paste0(getwd(),"/",i,"/07_Other/")
dir.create(file.path(odir), showWarnings = FALSE)
ofile = paste0(odir,"TF2DNA",date,".gmt")
system(paste0("rm ",ofile))
i = species_translate(i)
i = gsub(" ","-",i)
in_dir = paste0("pscan_files/",i,"*/*pscan")
in_files = system(paste0("ls ",in_dir), intern = TRUE)
for(infile in in_files){
gene = basename(infile) %>% gsub("\\.pscan$","",.)
data <- read_delim(infile,delim = "\t")
genes = data$target_name %>% paste(.,collapse = "\t")
oline = paste0(gene,"\t",alink,"\t",genes)
write(oline,ofile,append = T)
}
}
system("rm -r pscan_files")
shiny::runApp('~/Documents/eVITTA/easyGSEA')
filename = "/Users/jeancheng/Documents/visExpo/scRNA-seq/GSM4447249_KidneyOrganoid_FilteredGeneBCMatrices.h5"
library(Seurat)
library(dplyr)
library(Matrix)
library(gdata)
filename = "/Users/jeancheng/Documents/visExpo/scRNA-seq/GSM4447249_KidneyOrganoid_FilteredGeneBCMatrices.h5"
data = Read10X_h5(filename, use.names = TRUE, unique.features = TRUE)
install.packages("hdf5r")
data = Read10X_h5(filename, use.names = TRUE, unique.features = TRUE)
head(da)
head(daa)
head(data)
str(head(data))
head(data[,1:3])
View(data)
View(data)
i(data)
data
data$`Gene Expression`
sdata <- CreateSeuratObject(data, project = "GSM4447249")
View(sdata)
View(sdata)
# Here it is how the count matrix and the metadata look like for every cell
as.data.frame(sdata@assays$RNA@counts[1:10,1:2])
head(sdata@meta.data,10)
library(tidyverse) # install.packages('tidyverse')
pdat <- read_csv('https://raw.githubusercontent.com/BCCHR-trainee-omics-group/StudyGroup/master/workshops/2020-08-20_reshaping-data/pdat.csv')
meth <- read_csv('https://raw.githubusercontent.com/BCCHR-trainee-omics-group/StudyGroup/master/workshops/2020-08-20_reshaping-data/meth.csv')
expr <- read_csv('https://raw.githubusercontent.com/BCCHR-trainee-omics-group/StudyGroup/master/workshops/2020-08-20_reshaping-data/expr.csv')
library(tidyverse) # install.packages('tidyverse')
pdat <- read_csv('https://raw.githubusercontent.com/BCCHR-trainee-omics-group/StudyGroup/master/workshops/2020-08-20_reshaping-data/pdat.csv')
meth <- read_csv('https://raw.githubusercontent.com/BCCHR-trainee-omics-group/StudyGroup/master/workshops/2020-08-20_reshaping-data/meth.csv')
expr <- read_csv('https://raw.githubusercontent.com/BCCHR-trainee-omics-group/StudyGroup/master/workshops/2020-08-20_reshaping-data/expr.csv')
pdat
meth
expr
meth %>%
filter(cpg %in% c("cg03730249", "cg10440877"))
pdat
meth_long <- meth %>%
filter(cpg %in% c("cg03730249", "cg10440877")) %>%
pivot_longer(cols = -cpg,
names_to = 'meth_geo_id',
values_to = 'beta')
meth_long
e
meth %>%
filter(cpg %in% c("cg03730249", "cg10440877"))
expr %>%
filter(transcript %in% c("transcript_7927775", "transcript_8127692"))
expr_long <- expr %>%
filter(transcript %in% c("transcript_7927775", "transcript_8127692")) %>%
pivot_longer(cols = -FILL_THIS_IN,
names_to = 'expr_geo_id',
values_to = 'expression')
expr_long <- expr %>%
filter(transcript %in% c("transcript_7927775", "transcript_8127692")) %>%
pivot_longer(cols = -transcript,
names_to = 'expr_geo_id',
values_to = 'expression')
expr_long
pdat_join <- pdat %>%
# we're going to only use the columns necessary for joining, and the diagnosis column
select(meth_geo_id, expr_geo_id, diagnosis) %>%
# join methylation data
left_join(meth_long, by = 'meth_geo_id') %>%
# join expression data
left_join(expr_long, by = 'expr_geo_id')
pdat_join <- pdat %>%
# we're going to only use the columns necessary for joining, and the diagnosis column
dplyr::select(meth_geo_id, expr_geo_id, diagnosis) %>%
# join methylation data
left_join(meth_long, by = 'meth_geo_id') %>%
# join expression data
left_join(expr_long, by = 'expr_geo_id')
pdat_join
pdat_join %>%
ggplot(aes(x = beta, y = expression)) +
geom_point(aes(color = diagnosis)) +
geom_smooth(method = 'lm') +
facet_grid(transcript~cpg, scales = 'free_y')
meth_long <- meth %>%
filter(cpg %in% c("cg03730249", "cg10440877")) %>%
pivot_longer(#cols = -cpg,
names_to = 'meth_geo_id',
values_to = 'beta')
meth_long <- meth %>%
filter(cpg %in% c("cg03730249", "cg10440877")) %>%
pivot_longer(cols = -cpg,
names_to = 'meth_geo_id',
values_to = 'beta')
meth_long
meth_long <- meth %>%
filter(cpg %in% c("cg03730249", "cg10440877")) %>%
pivot_longer(cols = -cpg)
meth_long
PercentageFeatureSet(sdata, "^MT-", col.name = "percent_mito")
mito_genes <- rownames(sdata)[grep("^MT-",rownames(sdata))]
mito_genes
sdata = PercentageFeatureSet(sdata, "^MT-", col.name = "percent_mito")
# Way1: Doing it using Seurat function
sdata = PercentageFeatureSet(sdata, "^MT-", col.name = "percent_mito")
# Way2: Doing it manually
total_counts_per_cell <- colSums(sdata@assays$RNA@counts  )
mito_genes <- rownames(sdata)[grep("^MT-",rownames(sdata))]
alldata$percent_mito <- colSums(sdata@assays$RNA@counts[mito_genes,]  ) / total_counts_per_cell
head(mito_genes,10)
sdata$percent_mito <- colSums(sdata@assays$RNA@counts[mito_genes,]  ) / total_counts_per_cell
head(mito_genes,10)
# Way1: Doing it using Seurat function
sdata <- PercentageFeatureSet(sdata, "^RP[SL]", col.name = "percent_ribo")
# Way2: Doing it manually
ribo_genes <- rownames(sdata)[grep("^RP[SL]",rownames(sdata))]
head(ribo_genes,10)
sdata$percent_ribo <- colSums(sdata@assays$RNA@counts[ribo_genes,]  ) / total_counts_per_cell
feats <- c("nFeature_RNA","nCount_RNA","percent_mito","percent_ribo")
VlnPlot(sdata, group.by= "orig.ident", features = feats, pt.size = 0.1,ncol = 4) + NoLegend()
# "long" data to be made wider
pdat_join
pdat_join %>%
pivot_wider(id_cols = -c(cpg, beta),
names_from = cpg,
values_from = beta)
pdat_join %>%
# methylation data
pivot_wider(id_cols = -c(cpg, beta),
names_from = cpg,
values_from = beta) %>%
# expression data
pivot_wider(id_cols = -c(transcript, expression),
names_from = transcript,
values_from = expression)
# let's say these are your top 10 differentially expressed transcripts
top10 <- meth$cpg[c(1,5,10,15,20,25,30,35,40,45)]
# let's say these are your top 10 differentially expressed transcripts
top10 <- meth$cpg[c(1,5,10,15,20,25,30,35,40,45)]
# reshape
top10_long <- meth %>%
filter(cpg %in% top10) %>%
pivot_longer(
# another way to select all sample name columns
cols = contains('GSM'),
names_to = 'cpg',
values_to = 'beta')
meth
# let's say these are your top 10 differentially expressed transcripts
top10 <- meth$cpg[c(1,5,10,15,20,25,30,35,40,45)]
top10
# reshape
top10_long <- meth %>%
filter(cpg %in% top10) %>%
pivot_longer(
# another way to select all sample name columns
cols = contains('GSM'),
names_to = 'meth_geo_id',
values_to = 'beta')
top10_long
pdat
top10_long
pdat_join_top10 <- pdat %>%
left_join(top10_long)
pdat_join_top10 <- pdat %>%
left_join(top10_long, by = "meth_geo_id")
pdat_join_top10
pdat_join_top10 %>%
ggplot(aes(x = diagnosis, y = beta, fill = diagnosis)) +
geom_boxplot() +
facet_wrap(~cpg, nrow = 2) +
theme_classic() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank()) +
labs(x = '')
View(sdata)
View(sdata)
sdata@assays$RNA@counts
head(sdata@assays$RNA@counts[,1])
head(sdata@assays$RNA@counts[,1:2])
tail(sdata@assays$RNA@counts[,1:2])
selected_c <- WhichCells(sdata, expression = nFeature_RNA > 200)
selected_f <- rownames(sdata)[ Matrix::rowSums(sdata) > 3]
data.filt <- subset(sdata, features=selected_f, cells=selected_c)
dim(data.filt)
head(data.filt)
runApp('~/Documents/eVITTA/easyGSEA')
runApp('~/Documents/eVITTA/easyVizR')
runApp('~/Documents/eVITTA/easyGSEA')
