contrasts <- makeContrasts("genderM:pnpos-genderF:pnpos", levels=design_gender_pn)
contrasts <- makeContrasts("genderM:pnpos-genderF:pnpos")
design_gender_pn <- model.matrix(~pdata_gender_pn$sequencing_batch + gender*pn)
colnames(design_gender_pn)
# create dgelist
y <- DGEList(counts=pcounts_gender_pn)
keep <- rowSums(cpm(y)>1) >= 4
y <- y[keep,,keep.lib.sizes=FALSE]
y=calcNormFactors(y, method = "TMM")
v = voom(y, design_gender_pn, plot = T)
fit <- lmFit(v, design_gender_pn)
fit <- eBayes(fit, trend = TRUE, robust = TRUE)
colnames(fit)
degs = topTable(fit, coef=ncol(fit),sort.by="P",number=Inf)
head(degs)
write.csv(degs,file="COVID19_gender_POS_vs_NEG_tmm.csv")
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
library(limma)
library(edgeR)
library(DESeq2)
library(readr)
library(GEOquery)
library(ggrepel)
library(data.table)
library(splines)
setwd("/Users/jeancheng/Documents/RNAseq/COVID19/GSE147507_A549COVID")
gse_mat = getGEO("GSE147507",GSEMatrix = T)
show(gse_mat)
pdata = pData(phenoData(gse_mat[[1]]))
str(head(pdata,n=1))
gse_mat = getGEO("GSE147507",GSEMatrix = T)
show(gse_mat)
pdata = pData(phenoData(gse_mat[[1]]))
str(head(pdata,n=1))
### Extract important columns
```{r,message = F}
titles_begin = c("title")
titles_end = c(":ch1")
c_names = colnames(pdata)[startsWith(colnames(pdata),paste(titles_begin,collapse = "|")) | endsWith(colnames(pdata),paste(titles_end,collapse = "|"))]
ppdata = pdata[,c_names]
rownames(ppdata) = ppdata$title
ppdata = ppdata[,-1]
# replace space with _ to neat the names
c_names = gsub(" ","_",colnames(ppdata))
c_names = sapply(c_names, function(x) unlist(strsplit(x,":"))[1])
# rename sample description titles
colnames(ppdata) = c_names
head(ppdata)
View(ppdata)
samples = c("Series6_A549-ACE2_Mock_1","Series6_A549-ACE2_Mock_2","Series6_A549-ACE2_Mock_3",
"Series6_A549-ACE2_SARS-CoV-2_1","Series6_A549-ACE2_SARS-CoV-2_2","Series6_A549-ACE2_SARS-CoV-2_3",
"Series16_A549-ACE2_Mock_1","Series16_A549-ACE2_Mock_2","Series16_A549-ACE2_Mock_3",
"Series16_A549-ACE2_SARS-CoV-2_1","Series16_A549-ACE2_SARS-CoV-2_2","Series16_A549-ACE2_SARS-CoV-2_3")
counts_ace2 = counts[colnames(counts) %in% samples]
head(counts_ace2[,1:3])
counts_ace2 = counts[colnames(counts) %in% samples]
colnames(counts)
# get data from supplementary
link <- gse_mat[[1]]@experimentData@other$supplementary_file
links = unlist(strsplit(link,"\n"))
counts = fread(links[2])
counts = data.frame(counts, stringsAsFactors = F)
# clean up colnames
c_names = gsub(" ","_",colnames(counts))
c_names = gsub("\\.","-",c_names)
colnames(counts) = c_names
# rename rows as gene ids
rownames(counts) = counts[,1]
counts = counts[,-1]
dim(counts)
head(counts[,1:3])
# rename rows as gene ids
rownames(counts) = counts[,1]
counts = counts[,-1]
dim(counts)
head(counts[,1:3])
### Extract interested samples
```{r,message=F}
samples = c("Series6_A549-ACE2_Mock_1","Series6_A549-ACE2_Mock_2","Series6_A549-ACE2_Mock_3",
"Series6_A549-ACE2_SARS-CoV-2_1","Series6_A549-ACE2_SARS-CoV-2_2","Series6_A549-ACE2_SARS-CoV-2_3",
"Series16_A549-ACE2_Mock_1","Series16_A549-ACE2_Mock_2","Series16_A549-ACE2_Mock_3",
"Series16_A549-ACE2_SARS-CoV-2_1","Series16_A549-ACE2_SARS-CoV-2_2","Series16_A549-ACE2_SARS-CoV-2_3")
counts_ace2 = counts[colnames(counts) %in% samples]
head(counts_ace2[,1:3])
ppdata_ace2 = ppdata[which(rownames(ppdata) %in% samples)]
ppdata_ace2 = ppdata[rownames(ppdata) %in% samples]
ppdata_ace2 = ppdata[rownames(ppdata) %in% samples,]
head(ppdata_ace2[,1:3])
View(ppdata_ace2)
ppdata_ace2$mut = factor(c(rep("lMOI",6),rep("hMOI",6)))
ppdata_ace2$mut
ppdata_ace2$mut = relevel(ppdata_ace2$mut, ref="lMOI")
ppdata_ace2$mut
dim(ppdata_ace2)
ppdata_ace2$condition = factor(c(rep("mock",3),rep("moi",3),rep("mock",3),rep("moi",3)))
ppdata_ace2$condition
ppdata_ace2$patient = factor(rep(1:3,4))
ppdata_ace2$patient
design_ace2 = model.matrix(~mut + mut:patient + mut:condition)
mut = factor(c(rep("lMOI",6),rep("hMOI",6)))
mut = relevel(ppdata_ace2$mut, ref="lMOI")
condition = factor(c(rep("mock",3),rep("moi",3),rep("mock",3),rep("moi",3)))
patient = factor(rep(1:3,4))
design_ace2 = model.matrix(~mut + mut:patient + mut:condition)
colnames(design_ace2)
condition = factor(c(rep("mock",3),rep("sars",3),rep("mock",3),rep("sars",3)))
design_ace2 = model.matrix(~mut + mut:patient + mut:condition)
colnames(design_ace2)
extract_counts <- function(data=ppdata_ace2,mat=counts){
fsamples = rownames(data)
pcounts = mat[colnames(mat) %in% fsamples]
return(pcounts)
}
pcounts_ace2 = extract_counts()
View(pcounts_ace2)
# create dgelist
y <- DGEList(counts=pcounts_ace2)
keep <- rowSums(cpm(y)>1) >= 4
y <- y[keep,,keep.lib.sizes=FALSE]
y=calcNormFactors(y, method = "TMM")
v = voom(y, design_ace2, plot = T)
fit <- lmFit(v, design_ace2)
fit <- eBayes(fit, trend = TRUE, robust = TRUE)
colnames(fit)
model.matrix(~ mut*condition)
colnames(model.matrix(~ mut*condition))
colnames(fit)
fit2 <- contrasts.fit(fit, c(0,0,0,0,0,0,-1,1))
colnames(fit2)
degs = topTable(fit2, sort.by="P",number=Inf)
degs = topTable(fit2,number=Inf)
fit <- lmFit(v, design_ace2)
fit <- eBayes(fit, trend = TRUE, robust = TRUE)
colnames(fit)
fit2 <- contrasts.fit(fit, c(0,0,0,0,0,0,-1,1))
View(fit2)
View(fit2)
View(fit)
View(fit)
fit2 <- eBayes(fit2)
degs = topTable(fit2, sort.by="P",number=Inf)
head(degs)
write.csv(degs,file="A549_pos-moi_tmm.csv")
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
design_ace2_lmoi = model.matrix(~patient + condition)
colnames(design_ace2_lmoi)
head(ppdata_ace2[,1:3])
pppdata_ace2_lmoi = ppdata_ace2[1:6,]
pppdata_ace2_lmoi
pcounts_ace2_lmoi = extract_counts(data=pppdata_ace2_lmoi)
simple_limma_run <- function(design, counts){
y <- DGEList(counts=counts)
keep <- rowSums(cpm(y)>1) >= 4
y <- y[keep,,keep.lib.sizes=FALSE]
y=calcNormFactors(y, method = "TMM")
v = voom(y, design, plot = T)
fit <- lmFit(v, design)
fit <- eBayes(fit, trend = TRUE, robust = TRUE)
degs = topTable(fit, sort.by="P",number=Inf)
}
simple_limma_run <- function(design, counts){
y <- DGEList(counts=counts)
keep <- rowSums(cpm(y)>1) >= 4
y <- y[keep,,keep.lib.sizes=FALSE]
y=calcNormFactors(y, method = "TMM")
v = voom(y, design, plot = T)
fit <- lmFit(v, design)
fit <- eBayes(fit, trend = TRUE, robust = TRUE)
degs = topTable(fit, sort.by="P",number=Inf)
return(degs)
}
degs = simple_limma_run(design_ace2_lmoi,pcounts_ace2_lmoi)
simple_limma_run <- function(design, pcounts){
y <- DGEList(counts=pcounts)
keep <- rowSums(cpm(y)>1) >= 4
y <- y[keep,,keep.lib.sizes=FALSE]
y=calcNormFactors(y, method = "TMM")
v = voom(y, design, plot = T)
fit <- lmFit(v, design)
fit <- eBayes(fit, trend = TRUE, robust = TRUE)
degs = topTable(fit, sort.by="P",number=Inf)
return(degs)
}
degs = topTable(fit, sort.by="P",number=Inf)
return(degs)
}
### LowMOI
```{r}
condition = factor(c(rep("mock",3),rep("sars",3)))
patient = factor(rep(1:3,2))
design_ace2_lmoi = model.matrix(~patient + condition)
colnames(design_ace2_lmoi)
pppdata_ace2_lmoi = ppdata_ace2[1:6,]
pcounts_ace2_lmoi = extract_counts(data=pppdata_ace2_lmoi)
degs = simple_limma_run(design_ace2_lmoi,pcounts_ace2_lmoi)
simple_limma_run <- function(design, pcounts){
y <- DGEList(counts=pcounts)
keep <- rowSums(cpm(y)>1) >= 4
y <- y[keep,,keep.lib.sizes=FALSE]
y=calcNormFactors(y, method = "TMM")
v = voom(y, design, plot = T)
fit <- lmFit(v, design)
fit <- eBayes(fit, trend = TRUE, robust = TRUE)
degs = topTable(fit, sort.by="F",number=Inf)
return(degs)
}
degs = topTable(fit, sort.by="F",number=Inf)
return(degs)
}
### LowMOI
```{r}
condition = factor(c(rep("mock",3),rep("sars",3)))
patient = factor(rep(1:3,2))
design_ace2_lmoi = model.matrix(~patient + condition)
colnames(design_ace2_lmoi)
pppdata_ace2_lmoi = ppdata_ace2[1:6,]
pcounts_ace2_lmoi = extract_counts(data=pppdata_ace2_lmoi)
degs = simple_limma_run(design_ace2_lmoi,pcounts_ace2_lmoi)
head(degs)
simple_limma_run <- function(design, pcounts){
y <- DGEList(counts=pcounts)
keep <- rowSums(cpm(y)>1) >= 4
y <- y[keep,,keep.lib.sizes=FALSE]
y=calcNormFactors(y, method = "TMM")
v = voom(y, design, plot = T)
fit <- lmFit(v, design)
fit <- eBayes(fit, trend = TRUE, robust = TRUE)
degs = topTable(fit, coef = ncol(fit), sort.by="P.Value",number=Inf)
return(degs)
}
degs = topTable(fit, coef = ncol(fit), sort.by="P.Value",number=Inf)
return(degs)
}
### LowMOI
```{r}
condition = factor(c(rep("mock",3),rep("sars",3)))
patient = factor(rep(1:3,2))
design_ace2_lmoi = model.matrix(~patient + condition)
colnames(design_ace2_lmoi)
pppdata_ace2_lmoi = ppdata_ace2[1:6,]
pcounts_ace2_lmoi = extract_counts(data=pppdata_ace2_lmoi)
degs = simple_limma_run(design_ace2_lmoi,pcounts_ace2_lmoi)
simple_limma_run <- function(design, pcounts){
y <- DGEList(counts=pcounts)
keep <- rowSums(cpm(y)>1) >= 4
y <- y[keep,,keep.lib.sizes=FALSE]
y=calcNormFactors(y, method = "TMM")
v = voom(y, design, plot = T)
fit <- lmFit(v, design)
fit <- eBayes(fit, trend = TRUE, robust = TRUE)
degs = topTable(fit, coef = ncol(fit), sort.by="P",number=Inf)
return(degs)
}
degs = topTable(fit, coef = ncol(fit), sort.by="P",number=Inf)
return(degs)
}
### LowMOI
```{r}
condition = factor(c(rep("mock",3),rep("sars",3)))
patient = factor(rep(1:3,2))
design_ace2_lmoi = model.matrix(~patient + condition)
colnames(design_ace2_lmoi)
pppdata_ace2_lmoi = ppdata_ace2[1:6,]
pcounts_ace2_lmoi = extract_counts(data=pppdata_ace2_lmoi)
degs = simple_limma_run(design_ace2_lmoi,pcounts_ace2_lmoi)
head(degs)
write.csv(degs,file="A549_lMOI.csv")
getwd()
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
condition = factor(c(rep("mock",3),rep("sars",3)))
patient = factor(rep(1:3,2))
design_ace2_lmoi = model.matrix(~patient + condition)
colnames(design_ace2_lmoi)
pppdata_ace2_lmoi = ppdata_ace2[7:12,]
pcounts_ace2_lmoi = extract_counts(data=pppdata_ace2_lmoi)
degs = simple_limma_run(design_ace2_lmoi,pcounts_ace2_lmoi)
write.csv(degs,file="A549_hMOI.csv")
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
runApp('~/Documents/easyGSEA_v2/DEG_part')
library(wordcloud)
install.packages("wordcloud")
runApp('~/Documents/easyGSEA_v2/DEG_part')
runApp('~/Documents/easyGSEA/DEG_part')
View(ppdata)
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
samples = paste(samples, collapse = "|")
samples
samples = c("Series15_HealthyLungBiopsy_","Series15_COVID19Lung_")
samples = paste(samples, collapse = "|")
grepl(paste0("^",samples),colnames(counts))
counts_ace2 = counts[grepl(paste0("^",samples),colnames(counts))]
head(counts_ace2[,1:3])
ppdata_ace2 = ppdata[grepl(paste0("^",samples),rownames(ppdata)),]
head(ppdata_ace2[,1:3])
# small function to extract count table
extract_counts <- function(data=ppdata_ace2,mat=counts){
fsamples = rownames(data)
pcounts = mat[colnames(mat) %in% fsamples]
return(pcounts)
}
simple_limma_run <- function(design, pcounts){
y <- DGEList(counts=pcounts)
keep <- rowSums(cpm(y)>1) >= 4
y <- y[keep,,keep.lib.sizes=FALSE]
y=calcNormFactors(y, method = "TMM")
v = voom(y, design, plot = T)
fit <- lmFit(v, design)
fit <- eBayes(fit, trend = TRUE, robust = TRUE)
degs = topTable(fit, coef = ncol(fit), sort.by="P",number=Inf)
return(degs)
}
condition = factor(c(rep("healthy",2),rep("COVID",2)))
patient = factor(rep(1:2,2))
design_ace2_lmoi = model.matrix(~patient + condition)
degs = simple_limma_run(design_ace2_lmoi,pcounts_ace2)
colnames(design_ace2_lmoi)
dim(pcounts_ace2)
dim(design_ace2_lmoi)
degs = simple_limma_run(design_ace2,pcounts_ace2)
write.csv(degs,file="COVID19patients.csv")
runApp('~/Documents/easyGSEA/DEG_part')
write.csv(degs,file="COVID19patients.csv")
getwd()
runApp('~/Documents/easyGSEA/DEG_part')
runApp('~/Documents/easyGSEA/DEG_part')
runApp('~/Documents/easyGSEA/DEG_part')
runApp('~/Documents/easyGSEA/DEG_part')
runApp('~/Documents/easyGSEA/DEG_part')
runApp('~/Documents/easyGSEA/DEG_part')
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
runApp('~/Documents/easyGSEA/DEG_part')
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
runApp('~/Documents/easyGSEA/DEG_part')
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
date=20200711
# ==========WikiPathways=============
org_dbs <- list(
"bta" = org.Bt.eg.db::org.Bt.egSYMBOL,
"cel" = org.Ce.eg.db::org.Ce.egSYMBOL,
"cfa" = org.Cf.eg.db::org.Cf.egSYMBOL,
"dre" = org.Dr.eg.db::org.Dr.egSYMBOL,
"dme" = org.Dm.eg.db::org.Dm.egSYMBOL,
"gga" = org.Gg.eg.db::org.Gg.egSYMBOL,
"hsa" = org.Hs.eg.db::org.Hs.egSYMBOL,
"mmu" = org.Mm.eg.db::org.Mm.egSYMBOL,
"rno" =  org.Rn.eg.db::org.Rn.egSYMBOL,
"sce" = c(org.Sc.sgd.db::org.Sc.sgdGENENAME,org.Sc.sgd.db::org.Sc.sgdENTREZID),
"ssc" = org.Ss.eg.db::org.Ss.egSYMBOL
)
# # perl script to generate desirable gmt format
p_script = "perl -ne '($g,$des,$a)=(split (/\t/,$_,3));($g,$id)=(split(/%/,$g))[0,2];print($g.\"%\".$id.\"\t\".$des.\"\t\".$a);' "
p_script = noquote(p_script)
# change to working directory
setwd("/Users/jeancheng/Documents/easyGSEA_v2/GSEA_part_v5/gmts")
# download WikiPathways gmt
for(i in species_names){
if(i == "cfa"){next} # no wikipathway data available for cfa
dir.create(file.path(paste0(getwd(),"/",i,"/02_Pathway")), showWarnings = FALSE)
# download WP GMT and format it to our format
gmt =  downloadPathwayArchive(organism=species_translate(i), format="gmt", destpath = paste0("./",i,"/."))
infile = paste0(getwd(),"/",i,"/","WikiPathways",date,".gmt")
cm = paste0("sed 's/^ //' ",paste0(getwd(),"/",i,"/",gmt),"|sed 's/ /_/g'|sed 's/^/WP_/'|",p_script ," > ",infile)
system(cm)
# delete original data downloaded from official WP website
file.remove(paste0(getwd(),"/",i,"/",gmt))
# remove previous WP GMTs
system(paste0("rm ",paste0(getwd(),"/",i,"/02_Pathway/WikiPathways*.gmt")))
# load org.db & convert ENTREZ gene IDs to symbols
org_db = org_dbs[[i]]
egSYMBOL = NULL
if(i == "sce"){
a = toTable(org_dbs[[i]][[1]]);b = toTable(org_dbs[[i]][[2]])
egSYMBOL = merge(a,b,by="systematic_name")
egSYMBOL <- setNames(egSYMBOL$gene_name,egSYMBOL$gene_id)
}else{
egSYMBOL <- toTable(org_db)
egSYMBOL <- setNames(egSYMBOL$symbol,egSYMBOL$gene_id)
}
# gmt file to store the data
ofile = paste0(getwd(),"/",i,"/02_Pathway/WikiPathways",date,".gmt")
system(paste0("rm ",getwd(),"/",i,"/02_Pathway/WikiPathways*gmt"))
pathways = readLines(infile)
system(paste0("rm ",infile))
for(pathway in pathways){
genes = unlist(strsplit(pathway,"\t"))
pathway = genes[1]; wlink = genes[2]
genes = genes[3:length(genes)]
# convert using org.db
genes = unname(egSYMBOL[genes])
write(paste0(pathway,"\t",wlink,"\t",paste(genes,collapse = "\t")),ofile,append = T)
}
}
library(rWikiPathways)
# download WikiPathways gmt
for(i in species_names){
if(i == "cfa"){next} # no wikipathway data available for cfa
dir.create(file.path(paste0(getwd(),"/",i,"/02_Pathway")), showWarnings = FALSE)
# download WP GMT and format it to our format
gmt =  downloadPathwayArchive(organism=species_translate(i), format="gmt", destpath = paste0("./",i,"/."))
infile = paste0(getwd(),"/",i,"/","WikiPathways",date,".gmt")
cm = paste0("sed 's/^ //' ",paste0(getwd(),"/",i,"/",gmt),"|sed 's/ /_/g'|sed 's/^/WP_/'|",p_script ," > ",infile)
system(cm)
# delete original data downloaded from official WP website
file.remove(paste0(getwd(),"/",i,"/",gmt))
# remove previous WP GMTs
system(paste0("rm ",paste0(getwd(),"/",i,"/02_Pathway/WikiPathways*.gmt")))
# load org.db & convert ENTREZ gene IDs to symbols
org_db = org_dbs[[i]]
egSYMBOL = NULL
if(i == "sce"){
a = toTable(org_dbs[[i]][[1]]);b = toTable(org_dbs[[i]][[2]])
egSYMBOL = merge(a,b,by="systematic_name")
egSYMBOL <- setNames(egSYMBOL$gene_name,egSYMBOL$gene_id)
}else{
egSYMBOL <- toTable(org_db)
egSYMBOL <- setNames(egSYMBOL$symbol,egSYMBOL$gene_id)
}
# gmt file to store the data
ofile = paste0(getwd(),"/",i,"/02_Pathway/WikiPathways",date,".gmt")
system(paste0("rm ",getwd(),"/",i,"/02_Pathway/WikiPathways*gmt"))
pathways = readLines(infile)
system(paste0("rm ",infile))
for(pathway in pathways){
genes = unlist(strsplit(pathway,"\t"))
pathway = genes[1]; wlink = genes[2]
genes = genes[3:length(genes)]
# convert using org.db
genes = unname(egSYMBOL[genes])
write(paste0(pathway,"\t",wlink,"\t",paste(genes,collapse = "\t")),ofile,append = T)
}
}
#===========KEGG=============
for(i in species_names){
con = paste0("http://rest.kegg.jp/list/pathway/",i)
pathwaylist = readLines(con=con)
# getting KEGG list for species
pathways = list()
for(pathway in pathwaylist){
pathway = unlist(strsplit(pathway,"\t"))
id = pathway[[1]]; pathway = pathway[[2]]
id = unlist(strsplit(id, ":"))[2]; pathway = unlist(strsplit(pathway, " - "))[1]
pathway = gsub(" ","_",pathway)
names(pathway) = id
pathways = c(pathways,pathway)
}
pathwaylist = NULL
# getting genes for KEGG list
genes = list()
for(pathway in names(pathways)){
message(paste0("Getting genes for ",pathway))
con = paste0("http://rest.kegg.jp/get/",pathway)
lines = readLines(con=con)
genes_yes = NULL
for(aline in lines){
if(grepl("^GENE",aline)){
genes_yes = "yes"
}else if(is.null(genes_yes) == F & grepl("^\\S",aline)){
genes_yes = NULL
break
}
if(is.null(genes_yes) == F){
gene = unlist(strsplit(aline,"\\s+"))
id = gene[2]; gene = gene[3]
if(grepl(";$", gene)){
gene = sub(";$","",gene)
}else{
gene = ""
}
genes[[pathway]] = c(genes[[pathway]],gene)
}
}
}
out_dir = paste0(getwd(),"/",i,"/02_Pathway/")
out_file = paste0(out_dir,"KEGG",date,".gmt")
system(paste0("rm ",out_dir,"KEGG*gmt"))
# write to GMT
message(paste0("Writing to GMT - KEGG ",i))
for(pathway in names(genes)){
pathway_name = paste0("KEGG_",paste(pathways[[pathway]],collapse = "_"),"%",pathway)
pathway_genes = paste(genes[[pathway]],collapse = "\t")
write(paste0(pathway_name,"\t",paste0("http://rest.kegg.jp/get/",pathway),"\t",pathway_genes),out_file,append= T)
}
}
BiocManager::install("mygene")
library(mygene)
file = "/Users/jeancheng/Documents/kelsie/analysis/DEGs_v3/GSEA_v1/nhr49.rnk"
ranks = read_delim(file, "\t" , escape_double = FALSE, trim_ws = TRUE)
ranks <- setNames(ranks[[2]], ranks[[1]])
str(ranks)
?metadata
mygene<-MyGene()
metadata(mygene)
View(mygene)
View(metadata(mygene))
getGenes(names(ranks),species=6239)
getGenes(names(ranks),species=6239,fields = c("symbol","entrezgene"))
getGenes(names(ranks),fields = c("symbol","entrezgene"))
queryMany(names(ranks),scopes = c("symbol"),species=6239)
queryMany(names(ranks),species=6239)
install.packages("gprofiler2")
runApp('~/Documents/easyGSEA_v2/GSEA_part_v5')
