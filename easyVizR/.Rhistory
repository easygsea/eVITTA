nobs(mod)
nods(mod1)
nobs(mod1)
library(lubridate)
library(nycflights13)
head(diamonds)
ggplot(diamonds, aes(cut, price)) + geom_boxplot()
ggplot(diamonds, aes(color, price)) + geom_boxplot()
ggplot(diamonds, aes(clarity, price)) + geom_boxplot()
ggplot(diamonds, aes(carat, price)) +
goem_hex(bins = 50)
ggplot(diamonds, aes(carat, price)) +
geom_hex(bins = 50)
diamonds2 <- diamonds %>%
filter(carat <= 2.5) %>%
mutate(lprice = log(price), lcarat = log(carat))
ggplot(diamonds2, aes(x = lcarat, y = lprice))
ggplot(diamonds2, aes(x = lcarat, y = lprice)) +
geom_hex(bins = 10)
ggplot(diamonds2, aes(x = lcarat, y = lprice)) +
geom_hex(bins = 100)
ggplot(diamonds2, aes(x = lcarat, y = lprice)) +
geom_hex(bins = 50)
mod_diamond <- lm(lprice ~ lcarat, data = diamonds2)
diamonds2 <- diamonds %>%
filter(carat <= 2.5) %>%
mutate(lprice = log2(price), lcarat = log2(carat))
ggplot(diamonds2, aes(x = lcarat, y = lprice)) +
geom_hex(bins = 50)
mod_diamond <- lm(lprice ~ lcarat, data = diamonds2)
grid <- diamonds %>%
data_grid(carat = seq_range(carat, 20)) %>%
mutate(lcarat = log2(carat)) %>%
add_predictions(mod_diamond, "lprice") %>%
mutate(price = 2 ^ lprice)
ggplot(diamonds2, aes(x = carat, y = price)) +
geom_hex() +
geom_line(data =grid)
ggplot(diamonds2, aes(x = carat, y = price)) +
geom_hex(bins = 50) +
geom_line(data =grid)
ggplot(diamonds2, aes(x = carat, y = price)) +
geom_hex(bins = 50) +
geom_line(data =grid, colour = "red", size = 1.5)
ggplot(diamonds2, aes(x = carat, y = price)) +
geom_hex(bins = 50) +
geom_line(data =grid, colour = "red", size = 1)
diamonds2 <- diamonds %>%
filter(carat <= 2.5) %>%
mutate(lprice = log2(price), lcarat = log2(carat))
mod_diamond <- lm(lprice ~ lcarat, data = diamonds2)
grid <- diamonds %>%
data_grid(carat = seq_range(carat, 20)) %>%
mutate(lcarat = log2(carat)) %>%
add_predictions(mod_diamond, "lprice") %>%
mutate(price = 2 ^ lprice)
ggplot(diamonds2, aes(x = carat, y = price)) +
geom_hex(bins = 50) +
geom_line(data = grid, colour = "red", size = 1)
grid <- diamonds2 %>%
data_grid(carat = seq_range(carat, 20)) %>%
mutate(lcarat = log2(carat)) %>%
add_predictions(mod_diamond, "lprice") %>%
mutate(price = 2 ^ lprice)
ggplot(diamonds2, aes(x = carat, y = price)) +
geom_hex(bins = 50) +
geom_line(data = grid, colour = "red", size = 1)
diamonds2 <- diamonds2 %>%
add_residuals(mod_diamond, "lresid")
head(diamonds2)
ggplot(diamonds, aes(carat, lresid)) +
geom_hex(bins = 50)
ggplot(diamonds2, aes(carat, lresid)) +
geom_hex(bins = 50)
ggplot(diamonds2, aes(cut, lresid)) + geom_boxplot
ggplot(diamonds2, aes(cut, lresid)) + geom_boxplot()
ggplot(diamonds2, aes(color, lresid)) + geom_boxplot()
ggplot(diamonds2, aes(clarity, lresid)) + geom_boxplot()
mod_diamond2 <- lm(lprice ~ lcarat + color + cut + clarity, data = diamonds2)
grid <- diamonds2 %>%
data_grid(cut, .model = mod_diamond2) %>%
add_predictions(mod_diamond2)
ggplot(grid, aes(cut, pred)) +
geom__point()
ggplot(grid, aes(cut, pred)) +
geom_point()
diamonds2 <- diamonds %>%
add_residuals(mod_diamond2, "lresid2")
ggplot(diamonds2, aes(x = lcarat, y = lresid2)) +
geom_hex(bins  = 50)
ggplot(diamonds2, aes(x = lcarat, y = lresid2)) +
geom_hex(bins  = 50)
diamonds2 <- diamonds %>%
add_residuals(mod_diamond2, "lresid2")
diamonds2 <- diamonds2 %>%
add_residuals(mod_diamond2, "lresid2")
ggplot(diamonds2, aes(x = lcarat, y = lresid2)) +
geom_hex(bins  = 50)
diamonds2 %>%
filter(abs(lresid2) > 1) %>%
add_predictions(mod_diamond2) %>%
mutate(pred = round(2^pred)) %>%
select(price, pred, carat:table, x:z) %>%
arrange(price)
head(flights)
ggplot(daily, aes(x = date, y = n)) +
geom_line()
daily <- flights %>%
mutate(date = make_date(year, month, day)) %>%
group_by(date) %>%
summarise(n = n())
ggplot(daily, aes(x = date, y = n)) +
geom_line()
ggplot(daily, aes(wday, n)) +
geom_boxplot()
mod <- lm(n ~ wday, data = daily)
library(lubridate)
mod <- lm(n ~ wday, data = daily)
mod <- lm(n ~ wday, data = daily)
daily <- daily %>%
mutate(wday = wday(date, label = TRUE))
ggplot(daily, aes(wday, n)) +
geom_boxplot()
mod <- lm(n ~ wday, data = daily)
daily$wday
grid <- daily %>%
data_grid(wday) %>%
add_predictions(mod, "n")
grid <- diamonds2 %>%
data_grid(cut, .model = mod_diamond2)
grid
(data_grid(diamonds2,cut()))
(data_grid(diamonds2,cut)
)
grid <- daily %>%
data_grid(wday) %>%
add_predictions(mod, "n")
grid
coef(mod)
daily$wday
ggplot(daily, aes(wday, n)) +
geom_boxplot() +
geom_point(data = grid, colour = "red", size = 4)
daily <- daily %>%
add_residuals(mod)
daily
geom_ref_line(h = 0
daily %>%
ggplot(aes(date, resid)) +
geom_line() +
geom_ref_line(h = 0)
daily %>%
ggplot(aes(date, resid)) +
geom_line() +
geom_ref_line(h = 0)
daily %>%
ggplot(aes(date, resid)) +
geom_freqpoly() +
geom_ref_line(h = 0)
daily %>%
ggplot(aes(date, resid)) +
geom_line() +
geom_ref_line(h = 0)
daily %>%
ggplot(aes(x = date, y = resid)) +
geom_line() +
geom_ref_line(h = 0)
# the residual is the difference between prediction and actual,
# so the residual here is caused by date, without weekdays
daily %>%
ggplot(aes(x = date, y = resid)) +
geom_line() +
geom_ref_line(h = 0)
daily
ggplot(daily, aes(x = date, y = resid, colour = wday)) +
geom_line() +
geom_ref_line(h = 0)
daily %>%
filter(resid < -100)
daily %>%
ggplot(aes(date, resid)) +
geom_ref_line(h = 0) +
geom_line() +
geom_smooth(se = FALSE, span = 0.20)
daily %>%
ggplot(aes(date, resid)) +
geom_ref_line(h = 0) +
geom_line() +
geom_smooth(se = TRUE, span = 0.20)
daily %>%
ggplot(aes(date, resid)) +
geom_ref_line(h = 0) +
geom_line() +
geom_smooth(se = FALSE, span = 0.20)
shiny::runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
shiny::runApp('C:/Users/15067/Desktop/eVITTA/easyGEO - Copy')
runApp()
runApp('C:/Users/15067/Desktop/eVITTA/easyGEO - Copy')
runApp('C:/Users/15067/Desktop/eVITTA/easyGEO - Copy')
runApp('C:/Users/15067/Desktop/eVITTA/easyGEO - Copy')
runApp('C:/Users/15067/Desktop/eVITTA/easyGEO - Copy')
shiny::runApp(system.file("exampl
e)
)
shiny::runApp(system.file("example"))
runApp('C:/Users/15067/Desktop/eVITTA/easyGEO - Copy')
runApp('C:/Users/15067/Desktop/eVITTA/easyGEO - Copy')
runApp('C:/Users/15067/Desktop/eVITTA/easyGEO - Copy')
runApp()
runApp('C:/Users/15067/Desktop/eVITTA/easyGEO - Copy')
runApp('C:/Users/15067/Desktop/eVITTA/easyGEO - Copy')
library(later)
runApp('C:/Users/15067/Desktop/eVITTA/easyGEO - Copy')
runApp('C:/Users/15067/Desktop/eVITTA/easyGEO - Copy')
shiny::runApp('C:/Users/15067/Desktop/eVITTA/easyVizR - Copy')
runApp('C:/Users/15067/Desktop/eVITTA/easyVizR - Copy')
runApp('C:/Users/15067/Desktop/eVITTA/easyVizR - Copy')
runApp('C:/Users/15067/Desktop/eVITTA/easyVizR')
runApp('C:/Users/15067/Desktop/eVITTA/easyGEO')
shiny::runApp('C:/Users/15067/Desktop/eVITTA/easyVizR')
runApp('C:/Users/15067/Desktop/eVITTA/easyVizR')
runApp('C:/Users/15067/Desktop/eVITTA/easyVizR')
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
str_split(fruits, " and ")
library(tidyverse)
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
str_split(fruits, " and ")
shiny::runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
library(visNetwork)
library(tidyverse)
library(plotly)
library(ggdendro)
# for coloring dendrogram
library(dendextend)
# the package to create an interactive dendrogram
# library(idendr0)
#setwd("/Users/jeancheng/Documents/visExpo/ggplot_collections/03_enrichment_network/")
setwd("C:/Users/15067/Desktop/clustering/03_enrichment_network")
# functions to calculate similarity coefficients
jaccard_coef <- function(x,y){
return(length(intersect(x,y))/length(union(x,y)))
}
overlap_coef <- function(x,y){
return(length(intersect(x,y))/min(length(x,y)))
}
combined_coef <- function(x,y,k=0.5){
o_coef <- overlap_coef(x,y)
j_coef <- jaccard_coef(x,y)
return((k * o_coef) + ((1-k) * j_coef))
}
# function to filter data according to p and q cutoffs
dfNEL <- function(df=fgseagg,p=p_cutoff,q=q_cutoff){
df <- tibble(df[df[["pval"]]<p,])
df <- df[df[["padj"]]<q,]
return(df)
}
# function to insert linebreaks at x characters (without cutting words in half)
addlinebreaks <- function(x, max, lbtype="<br>"){
gsub(paste0('(.{1,',max,'})(\\s|$)'), paste0('\\1',lbtype), x)
}
# function to color nodes according to p/q thresholds
get_colors = function(pq="padj"){
# colors = vector(mode="character", length=length(a))
colors = rep("white",nrow(df))
colors[df[[pq]]<0.25 & df$ES>0] = "rgba(254,224,144)" #lightyellow
colors[df[[pq]]<0.1 & df$ES>0] = "rgba(253,174,97)" #yellow
colors[df[[pq]]<0.05 & df$ES>0] = "rgba(244,109,67)" #orange
colors[df[[pq]]<0.01 & df$ES>0] = "rgba(215,48,39)" #red
colors[df[[pq]]<0.001 & df$ES>0] = "rgba(165,0,38)" #dark red
colors[df[[pq]]<0.25 & df$ES<0] = "rgba(198,219,239)" #pale blue
colors[df[[pq]]<0.1 & df$ES<0] = "rgba(158,202,225)" #light blue
colors[df[[pq]]<0.05 & df$ES<0] = "rgba(107,174,214)" #blue
colors[df[[pq]]<0.01 & df$ES<0] = "rgba(49,130,189)" #darker blue
colors[df[[pq]]<0.001 & df$ES<0] = "rgba(8,81,156)" #cornflower
return(colors)
}
# function to calculate edge matrix
edges <- function(b=b_combn,method="jaccard",cutoff=0.25,edges_k=0.5){
from = NULL;to=NULL;percent=NULL;sharedn=NULL;sharedlist=NULL
for(i in seq_along(b)){
c = b[[i]][[1]];d = b[[i]][[2]];coeff=0;
x = unname(unlist(a[c]))
y = unname(unlist(a[d]))
x = unlist(strsplit(x,";"));y = unlist(strsplit(y,";"));
if(method=="jaccard"){
coeff <- jaccard_coef(x,y)
}else if(method=="overlap"){
coeff <- overlap_coef(x,y)
}else if(method=="combined"){
coeff <- combined_coef(x,y,k=edges_k)
}
# print(coeff)
shared_genes = intersect(x,y)
if(coeff >= cutoff){
from = c(from, c)
to = c(to, d)
percent = c(percent, coeff)
sharedn = c(sharedn, length(shared_genes))
sharedlist = c(sharedlist,paste(shared_genes, collapse=", "))
}
c = NULL;d= NULL; x=NULL; y=NULL
}
edges <- data.frame(from = from,
to = to,
percent = percent,
sharedn = sharedn,
sharedlist = sharedlist,
stringsAsFactors=FALSE)
return(edges)
}
fgseagg <- read_csv("cel_WCC2-KEGG-WkPt-RctP-BlgP.csv")
# threshold for p or q
p_cutoff = 0.01
q_cutoff = 0.05
# method to calculate similarity coefficient
percent_method = "jaccard" #overlap combined
percent_cutoff = 0.25
combined_k = 0.5
# color by p or q
color_by = "padj"
# filter data according to p & q thresholds
df = dfNEL()
# create a list of pathways with their leadingEdge genes
a <- df$leadingEdge
a = sapply(a, function(x) strsplit(x," "))
names(a) <- df$pathway
# create pairwise combinations of pathways
b_combn<-sapply(as.data.frame(combn(names(a),2)), function(x) as.character(x), simplify = FALSE)
# calculate edge matrix
edges_mat <- edges(b=b_combn,method=percent_method,cutoff=percent_cutoff,edges_k=combined_k)
# calculate a edge matrix for hierarchical clustering
edges_mat2 <- edges(b=b_combn,method=percent_method,cutoff=0,edges_k=combined_k)
# Create a empty distance matrix with names
dist_matrix <- matrix(0,nrow(df),nrow(df))
colnames(dist_matrix) <- df$pathway
rownames(dist_matrix) <- df$pathway
# assign the distance matrix with value: dissimilarity percentage
disimilarity_vector <- 1-(edges_mat2$percent)
dist_matrix[lower.tri(dist_matrix,diag = FALSE)] = disimilarity_vector
hclust_matrix <- as.dist(dist_matrix)
# Do the hierarchical clustering
hc <- hclust(hclust_matrix, method = "complete")
# get the cluster id from the cutoff of similarity
# create a dataframe for further data mining with cluster id in df_further
cutoff_similarity <- 0.3
hc2 <- cutree(hc, h = 1 - cutoff_similarity)
number_of_clusters <- max(hc2)
print(number_of_clusters)
hc2_data <- hc2 %>%
as.data.frame() %>%
rownames_to_column() %>%
dplyr::rename("pathway" = "rowname")
df_further <- df %>%
left_join(hc2_data, by = "pathway") %>%
dplyr::rename("cluster" = ".")
df_rank <- df_further %>%
group_by(cluster) %>%
dplyr::summarise(n = n())%>%
mutate(rank = base::rank(-n, ties.method = "first" )) %>%
ungroup()
df_rank <- df_further %>%
left_join(df_rank, by = "cluster") %>%
dplyr::rename("origin_clu" = "cluster") %>%
dplyr::rename("cluster" = "rank")
df_further <- dplyr::select(df_rank, -origin_clu)
# create a data frame that has all the pathways having lowest P.adj. in each clusters
df_padj <- df_further %>%
group_by(cluster) %>%
mutate(n = n()) %>%
filter(padj == min(padj)) %>%
top_n(1, ES) %>%
filter(row_number()==1) %>%
dplyr::select(cluster, pathway,n, pval, ES, padj)
df_significant <- df_further %>%
left_join(df_padj, by = "cluster") %>%
mutate(cluster_name = paste(cluster, ": ", pathway.y))
# two simple dendrograms here
# plot(hc,labels = FALSE, hang= -1)
# plot(hc, cex = 0.5, hang = -1)
# plot a dendrogram nicely
# convert it to a dendrogram object
dhc <- as.dendrogram(hc)
# extract the dendrogram data
ddata <- dendro_data(dhc, type = "rectangle")
#color my dendrogram
dendro <- dhc %>%
#set("labels", label_short) %>%
dendextend::set("branches_k_color", k = number_of_clusters) %>%
dendextend::set("branches_lwd", 0.3) %>%
# dendextend::set("labels_cex", 0.3) %>%
# dendextend::set("labels_colors", k = 15) %>%
dendextend::set("leaves_pch", 19) %>%
dendextend::set("leaves_cex", 0.4)
#convert it to a ggplot object
gg_dendro <- as.ggdend(dendro)
# extract the points that need to have hover function
hover_points <- gg_dendro$nodes %>%
filter(leaf == TRUE) %>%
mutate(name = ddata$labels$label)
# create the points of the lowest p.adj for group labeling
df_padj_points <- df_padj %>%
left_join(hover_points, by = c("pathway" = "name")) %>%
mutate(pathway = strsplit(pathway,"%")[[1]][1]) %>%
mutate(complete_name = paste(cluster,": ", pathway)) %>%
mutate(length = str_length(complete_name))
df_padj_points$complete_name = lapply(df_padj_points$complete_name, function(x){
if(nchar(x) < 40){return(x)}
else{return(paste0(substr(x, 0, 40),"..."))}})
cluster_barplot <- df_padj_points %>%
arrange(desc(cluster)) %>%
ggplot(aes(x=ES, y=factor(complete_name, levels=complete_name),
fill=-log10(df_padj_points[["pval"]])*sign(ES),
text=paste0(
"<b>",df_padj_points[["complete_name"]],"</b>\n",
"ES=",signif(df_padj_points[["ES"]],digits=3),"; ",
"P=",signif(df_padj_points[["pval"]],digits=3),"; ",
"P.adj=",signif(df_padj_points[["padj"]],digits=3),"\n",
"Cluster size = ",n,"\n"))) +
geom_bar(stat="identity", width = 0.8) +
#scale_fill_gradientn(limits = c(-3,3),colours=gcols, values=gvalues, name=paste0("-log10(",pq,")*sign(ES)"), oob=squish) +
xlab("Enrichment Score (ES)") + ylab("") +
geom_vline(xintercept=0, size=0.1) +
theme_minimal() +
theme(axis.text.y = element_text(size=10),
legend.title = element_text(size = 9))
+ scale_y_discrete(labels = complete_name)
#  + scale_y_discrete(labels = complete_name)
#cluster_barplot
plotly_barplot <- ggplotly(cluster_barplot,
#height = yh,
tooltip = "text",
source = "bar_plot_click"
) %>%
# layout(legend=list(colorbar=list(side="right"))) %>%
event_register("plotly_click")
plotly_barplot
plotly_barplot
#plotly_legend <- left_join(hover_points, df_padj, by = c("name" = "pathway.x"))
# plot it out
ggplot_dendro <- gg_dendro %>%
ggplot(theme = theme_minimal(), labels = FALSE) + #, horiz = TRUE
#scale_y_continuous(trans = "reverse") +
ylim(1,-1.5) +
coord_flip()+
geom_point(data = hover_points, mapping = aes(x = x, y = y,text = name), size = 0.6) + geom_text(data = df_padj_points, mapping = aes(x = x, y = y - 0.01,label = complete_name), size = 3) +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.y = element_blank(),
#plot.margin=unit(c(0,0,0,0),"mm")
) +
#scale_x_continuous(expand = c(0,0))+
ylab("distance") +
ggtitle("Cluster Dendrogram") +
geom_hline(yintercept = 1 - cutoff_similarity, linetype="dashed", color = "grey")
# convert it to interative plotly diagram
ggplotly_dendro <- ggplot_dendro %>%
ggplotly(tooltip = c("name","x","y")) %>%
layout(showlegend = FALSE) %>%
#, xaxis = list(autorange = "reversed")
style(textposition = "right")
# convert it to interative plotly diagram
ggplotly_dendro <- ggplot_dendro %>%
ggplotly(tooltip = c("name","x","y")) %>%
layout(showlegend = FALSE) %>%
#, xaxis = list(autorange = "reversed")
style(textposition = "right")
ggplot_dendro
ggplotly_dendro
# generate edges dataframe
edgehovertexts <- paste0("<b>", edges_mat$from, "<br>", edges_mat$to,"</b><br>","<br>Shared leadingEdge:<br>", addlinebreaks(edges_mat$sharedlist,30,"<br>"))
# generate edges dataframe
edgehovertexts <- paste0("<b>", edges_mat$from, "<br>", edges_mat$to,"</b><br>","<br>Shared leadingEdge:<br>", addlinebreaks(edges_mat$sharedlist,30,"<br>"))
edges <- data.frame(
from = edges_mat$from,
to = edges_mat$to,
# width = edges_mat$sharedn*2,
# length = 1 - edgelist$percent,
title = edgehovertexts
)
View(df_further)
View(df)
tibble(x = 1 , y = 3)
rename(tibble(x = 1 , y = 3), c("x" = "abs"))
runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
head(df_download)
rv$df_download
runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
write.csv(df_further, file, row.names = TRUE)
?write.csv
runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
?rename
head(iris)
runApp('C:/Users/15067/Desktop/eVITTA/easyGSEA')
write.csv(df_further, file, row.names = TRUE)
shiny::runApp('C:/Users/15067/Desktop/eVITTA/easyVizR')
