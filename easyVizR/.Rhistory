gse_sup <- strsplit(gse_sup, "\n")[[1]]
# gse_sup
# check supplementary data in GSMs
gsm_sup <- unlist(extract_metadata(pData(phenoData(gse)), "supplementary", T))
gsm_sup[gsm_sup=="NONE"] <- NA # convert NONE to NA
gsm_sup <- gsm_sup[is.na(gsm_sup)==F] # delete NA
gsm_sup <- unlist(gsm_sup)
# detect where the data is
if (nrow(exprs(gse))>0){
source = "table"
print("Detected data source: as datatable in GSMs")
} else if (length(gse_sup) > 0){
source = "gse_sup"
print("Detected data source: as supplementary file in GSE")
print(paste0("GSE supplementary (",length(gse_sup),"): ", paste(gse_sup, collapse=", ")))
} else if (length(gsm_sup) > 0){
source = "gsm_sup"
print("Detected data source: as supplementary files in GSMs")
print(paste0("GSM supplementary (",length(gsm_sup),"): ", paste(gsm_sup, collapse=", ")))
} else {
source = "none"
print("Data source not detected!")
}
if (source == "table"){
head(exprs(gse))
} else  {
print("Downloading data matrix from the supplementary file(s)...")
newdirname <- notes(experimentData(gse))$geo_accession
dir.create(file.path(getwd(), newdirname), showWarnings = FALSE) # ensure dir exists
# get data from supplementary
for (url in gse_sup){
filename <- rev(strsplit(url, "/")[[1]])[[1]]
fn <- url
tf <- normalizePath(paste0(getwd(), "/", newdirname , "/", filename))
td <- normalizePath(paste0(getwd(), "/", newdirname))
download.file( fn , tf , mode = 'wb' )
wr <- normalizePath( "C:/Program Files/WinRAR/WinRAR.exe" )
shell( paste0( '"' , wr , '" x ' , tf , ' ' , td ) )
}
}
download.file( fn , tf , mode = 'wb' )
library(GEOquery)
library(dplyr)
gse_all <- getGEO("GSE126061",GSEMatrix=T)
# try to run as many diverse datasets as possible. Currently only RNAseq and microarrays
# GSE147507: poorly annotated data, 2 platforms, data in sup
# GSE137355: sample microarray data with table
# GSE132669: rnaseq with data in individual gsms
# GSE147507
# GSE63966
# GSE126061 hlh-30 data
# tabulate outputs of list function
tabulate <- function(object, FUN){
do.call(rbind, lapply(object, FUN))
}
platforms <- tabulate(gse_all, annotation)
print(paste0("available platforms: ", paste(platforms, collapse=", ")))
# select platform
platform = 1
print(paste("selected platform:", platforms[[platform]]))
gse <- gse_all[[platform]]
gse_metalist <- c("title", "type")
# ------------------ extract gse metadata matrix ----------------------
extract_metadata <- function(all_data, grep_terms, matrix=F){
if(matrix==F){
all_data <- Meta(all_data)
}
unlist(lapply(grep_terms, function(x){
all_data[grep(x,names(all_data))]
}),recursive=F)
}
tabulate_metadata <- function(list, grep_terms){
t(do.call(cbind, lapply(list, function(x){
extract_metadata(x, grep_terms)
})))
}
# extract relevant gse metadata
gse_meta_ext <- extract_metadata(notes(experimentData(gse)), gse_metalist,T)
# detect some basic parameters of this dataset.
if (gse_meta_ext$type=="Expression profiling by high throughput sequencing"){
# get library parameters for RNAseq
libraries <- as.matrix(pData(phenoData(gse)) %>% select(contains("library")))
gse_meta_ext$lib_source <- unique(libraries[,"library_source"])[[1]]
gse_meta_ext$lib_strategy <- unique(libraries[,"library_strategy"])[[1]]
} else if (gse_meta_ext$type=="Expression profiling by array") {
gse_meta_ext$lib_source <- "microarray"
gse_meta_ext$lib_strategy <- "microarray"
}
# ------------------ report ----------------------
print(paste0("GSE metadata for ", platforms[[platform]], ": "))
as.matrix(gse_meta_ext)
# provide the GSM fields you want to see (regex allowed)
gsm_metalist <- c("title", "platform_id", "channel_count", "characteristics", "library_source", "library_strategy")
# ------------------ extract phenodata matrix ----------------------
gsm_meta_ext<-as.matrix(pData(phenoData(gse)) %>% select(contains(gsm_metalist)))
# ------------------ tidy characteristics ----------------------
# gsm_meta_ext[,"characteristics"]
transform_vector <- function(vector, sep=": "){
unlist(lapply(vector, function(x){
if(is.na(x)==F){
ss <- strsplit(x, sep)[[1]]
out <- ss[[2]]
names(out) <- ss[[1]]
return(out)
}
}))
}
char_list <- data.frame(t(as.data.frame(pData(phenoData(gse))) %>% select(contains("characteristics"))))
char_list[char_list==""] <- NA
char_list <- as.list(char_list)
# map list of characters into dataframe format (those not found = NA)
char_list <- lapply(char_list, function(x){
transform_vector(x, ": ")
})
# char_list
chars <- names(table(unlist(lapply(char_list, names))))
# chars
ls <- lapply(char_list,function(x){
xx<- rep(NA, length(chars))
names(xx) <- chars
xx[names(x)] <- x
xx
})
# ls
char_mat <- data.frame(t(data.frame(ls)))
# get rid of single factor columns
to_keep <- function(x) any(is.numeric(x), length(unique(x)) > 1)
char_mat <- Filter(to_keep, char_mat)
# fill NAs with string?? (optional)
# char_mat[is.na(char_mat)] <- "NA"
# ------------------ report ----------------------
char_mat # display this matrix to user
# select desired variables
selected_vars <- colnames(char_mat)[1:2]
# ------------------ generate design matrix ----------------------
# convert to factors
design <- lapply(selected_vars, function(x){
factor(char_mat[[x]], levels = unique(char_mat[[x]]))
})
if (length(design)==1){
print(paste0("You have selected single variable mode: ", paste(selected_vars,collapse=", ")))
model.matrix(~ design[[1]])
} else if (length(design)==2){
print(paste0("You have selected two variable mode: ", paste(selected_vars,collapse=", ")))
model.matrix(~ design[[1]] + design[[2]])
}
# check supplementary data in GSE
gse_sup <- unlist(extract_metadata(notes(experimentData(gse)), "supplementary", T))
gse_sup[gse_sup=="NONE"] <- NA # convert NONE to NA
gse_sup <- gse_sup[is.na(gse_sup)==F] # delete NA
gse_sup <- strsplit(gse_sup, "\n")[[1]]
# gse_sup
# check supplementary data in GSMs
gsm_sup <- unlist(extract_metadata(pData(phenoData(gse)), "supplementary", T))
gsm_sup[gsm_sup=="NONE"] <- NA # convert NONE to NA
gsm_sup <- gsm_sup[is.na(gsm_sup)==F] # delete NA
gsm_sup <- unlist(gsm_sup)
# detect where the data is
if (nrow(exprs(gse))>0){
source = "table"
print("Detected data source: as datatable in GSMs")
} else if (length(gse_sup) > 0){
source = "gse_sup"
print("Detected data source: as supplementary file in GSE")
print(paste0("GSE supplementary (",length(gse_sup),"): ", paste(gse_sup, collapse=", ")))
} else if (length(gsm_sup) > 0){
source = "gsm_sup"
print("Detected data source: as supplementary files in GSMs")
print(paste0("GSM supplementary (",length(gsm_sup),"): ", paste(gsm_sup, collapse=", ")))
} else {
source = "none"
print("Data source not detected!")
}
if (source == "table"){
head(exprs(gse))
} else  {
print("Downloading data matrix from the supplementary file(s)...")
newdirname <- notes(experimentData(gse))$geo_accession
dir.create(file.path(getwd(), newdirname), showWarnings = FALSE) # ensure dir exists
# get data from supplementary
for (url in gse_sup){
filename <- rev(strsplit(url, "/")[[1]])[[1]]
fn <- url
tf <- normalizePath(paste0(getwd(), "/", newdirname , "/", filename))
td <- normalizePath(paste0(getwd(), "/", newdirname))
download.file( fn , tf , mode = 'wb' )
# wr <- normalizePath( "C:/Program Files/WinRAR/WinRAR.exe" )
# shell( paste0( '"' , wr , '" x ' , tf , ' ' , td ) )
}
}
gse_meta_ext$title
gse_meta_ext$title[1:10]
gse_meta_ext$title
substr(gse_meta_ext$title, 1, 10)
substr(gse_meta_ext$title, 1, 22)
substr(gse_meta_ext$title, 1, 230)
substr(gse_meta_ext$title, 1, 50)
# check supplementary data in GSE
gse_sup <- unlist(extract_metadata(notes(experimentData(gse)), "supplementary", T))
gse_sup[gse_sup=="NONE"] <- NA # convert NONE to NA
gse_sup <- gse_sup[is.na(gse_sup)==F] # delete NA
gse_sup <- strsplit(gse_sup, "\n")[[1]]
# gse_sup
# check supplementary data in GSMs
gsm_sup <- unlist(extract_metadata(pData(phenoData(gse)), "supplementary", T))
gsm_sup[gsm_sup=="NONE"] <- NA # convert NONE to NA
gsm_sup <- gsm_sup[is.na(gsm_sup)==F] # delete NA
gsm_sup <- unlist(gsm_sup)
# detect where the data is
if (nrow(exprs(gse))>0){
source = "table"
print("Detected data source: as datatable in GSMs")
} else if (length(gse_sup) > 0){
source = "gse_sup"
print("Detected data source: as supplementary file in GSE")
print(paste0("GSE supplementary (",length(gse_sup),"): ", paste(gse_sup, collapse=", ")))
} else if (length(gsm_sup) > 0){
source = "gsm_sup"
print("Detected data source: as supplementary files in GSMs")
print(paste0("GSM supplementary (",length(gsm_sup),"): ", paste(gsm_sup, collapse=", ")))
} else {
source = "none"
print("Data source not detected!")
}
if (source == "table"){
head(exprs(gse))
} else  {
print("Downloading data matrix from the supplementary file(s)...")
newdirname <- paste(notes(experimentData(gse))$geo_accession,
substr(gse_meta_ext$title, 1, 50),
Sys.Date(), sep="-")
dir.create(file.path(getwd(), newdirname), showWarnings = FALSE) # ensure dir exists
# get data from supplementary
for (url in gse_sup){
filename <- rev(strsplit(url, "/")[[1]])[[1]]
fn <- url
tf <- normalizePath(paste0(getwd(), "/", newdirname , "/", filename))
td <- normalizePath(paste0(getwd(), "/", newdirname))
download.file( fn , tf , mode = 'wb' )
# wr <- normalizePath( "C:/Program Files/WinRAR/WinRAR.exe" )
# shell( paste0( '"' , wr , '" x ' , tf , ' ' , td ) )
}
}
library(GEOquery)
library(dplyr)
gse_all <- getGEO("GSE126632",GSEMatrix=T)
# try to run as many diverse datasets as possible. Currently only RNAseq and microarrays
# GSE147507: poorly annotated data, 2 platforms, data in sup
# GSE137355: sample microarray data with table
# GSE132669: rnaseq with data in individual gsms
# GSE147507
# GSE63966
# GSE126061 hlh-30 data but only raw counts
# GSE126632 hlh-30 rnaseq
# tabulate outputs of list function
tabulate <- function(object, FUN){
do.call(rbind, lapply(object, FUN))
}
platforms <- tabulate(gse_all, annotation)
print(paste0("available platforms: ", paste(platforms, collapse=", ")))
# select platform
platform = 1
print(paste("selected platform:", platforms[[platform]]))
gse <- gse_all[[platform]]
gse_metalist <- c("title", "type")
# ------------------ extract gse metadata matrix ----------------------
extract_metadata <- function(all_data, grep_terms, matrix=F){
if(matrix==F){
all_data <- Meta(all_data)
}
unlist(lapply(grep_terms, function(x){
all_data[grep(x,names(all_data))]
}),recursive=F)
}
tabulate_metadata <- function(list, grep_terms){
t(do.call(cbind, lapply(list, function(x){
extract_metadata(x, grep_terms)
})))
}
# extract relevant gse metadata
gse_meta_ext <- extract_metadata(notes(experimentData(gse)), gse_metalist,T)
# detect some basic parameters of this dataset.
if (gse_meta_ext$type=="Expression profiling by high throughput sequencing"){
# get library parameters for RNAseq
libraries <- as.matrix(pData(phenoData(gse)) %>% select(contains("library")))
gse_meta_ext$lib_source <- unique(libraries[,"library_source"])[[1]]
gse_meta_ext$lib_strategy <- unique(libraries[,"library_strategy"])[[1]]
} else if (gse_meta_ext$type=="Expression profiling by array") {
gse_meta_ext$lib_source <- "microarray"
gse_meta_ext$lib_strategy <- "microarray"
}
# ------------------ report ----------------------
print(paste0("GSE metadata for ", platforms[[platform]], ": "))
as.matrix(gse_meta_ext)
# provide the GSM fields you want to see (regex allowed)
gsm_metalist <- c("title", "platform_id", "channel_count", "characteristics", "library_source", "library_strategy")
# ------------------ extract phenodata matrix ----------------------
gsm_meta_ext<-as.matrix(pData(phenoData(gse)) %>% select(contains(gsm_metalist)))
# ------------------ tidy characteristics ----------------------
# gsm_meta_ext[,"characteristics"]
transform_vector <- function(vector, sep=": "){
unlist(lapply(vector, function(x){
if(is.na(x)==F){
ss <- strsplit(x, sep)[[1]]
out <- ss[[2]]
names(out) <- ss[[1]]
return(out)
}
}))
}
char_list <- data.frame(t(as.data.frame(pData(phenoData(gse))) %>% select(contains("characteristics"))))
char_list[char_list==""] <- NA
char_list <- as.list(char_list)
# map list of characters into dataframe format (those not found = NA)
char_list <- lapply(char_list, function(x){
transform_vector(x, ": ")
})
# char_list
chars <- names(table(unlist(lapply(char_list, names))))
# chars
ls <- lapply(char_list,function(x){
xx<- rep(NA, length(chars))
names(xx) <- chars
xx[names(x)] <- x
xx
})
# ls
char_mat <- data.frame(t(data.frame(ls)))
# get rid of single factor columns
to_keep <- function(x) any(is.numeric(x), length(unique(x)) > 1)
char_mat <- Filter(to_keep, char_mat)
# fill NAs with string?? (optional)
# char_mat[is.na(char_mat)] <- "NA"
# ------------------ report ----------------------
char_mat # display this matrix to user
# select desired variables
selected_vars <- colnames(char_mat)[1:2]
# ------------------ generate design matrix ----------------------
# convert to factors
design <- lapply(selected_vars, function(x){
factor(char_mat[[x]], levels = unique(char_mat[[x]]))
})
if (length(design)==1){
print(paste0("You have selected single variable mode: ", paste(selected_vars,collapse=", ")))
model.matrix(~ design[[1]])
} else if (length(design)==2){
print(paste0("You have selected two variable mode: ", paste(selected_vars,collapse=", ")))
model.matrix(~ design[[1]] + design[[2]])
}
# check supplementary data in GSE
gse_sup <- unlist(extract_metadata(notes(experimentData(gse)), "supplementary", T))
gse_sup[gse_sup=="NONE"] <- NA # convert NONE to NA
gse_sup <- gse_sup[is.na(gse_sup)==F] # delete NA
gse_sup <- strsplit(gse_sup, "\n")[[1]]
# gse_sup
# check supplementary data in GSMs
gsm_sup <- unlist(extract_metadata(pData(phenoData(gse)), "supplementary", T))
gsm_sup[gsm_sup=="NONE"] <- NA # convert NONE to NA
gsm_sup <- gsm_sup[is.na(gsm_sup)==F] # delete NA
gsm_sup <- unlist(gsm_sup)
# detect where the data is
if (nrow(exprs(gse))>0){
source = "table"
print("Detected data source: as datatable in GSMs")
} else if (length(gse_sup) > 0){
source = "gse_sup"
print("Detected data source: as supplementary file in GSE")
print(paste0("GSE supplementary (",length(gse_sup),"): ", paste(gse_sup, collapse=", ")))
} else if (length(gsm_sup) > 0){
source = "gsm_sup"
print("Detected data source: as supplementary files in GSMs")
print(paste0("GSM supplementary (",length(gsm_sup),"): ", paste(gsm_sup, collapse=", ")))
} else {
source = "none"
print("Data source not detected!")
}
if (source == "table"){
head(exprs(gse))
} else  {
print("Downloading data matrix from the supplementary file(s)...")
newdirname <- paste(notes(experimentData(gse))$geo_accession,
substr(gse_meta_ext$title, 1, 50),
Sys.Date(), sep="-")
dir.create(file.path(getwd(), newdirname), showWarnings = FALSE) # ensure dir exists
# get data from supplementary
for (url in gse_sup){
filename <- rev(strsplit(url, "/")[[1]])[[1]]
fn <- url
tf <- normalizePath(paste0(getwd(), "/", newdirname , "/", filename))
td <- normalizePath(paste0(getwd(), "/", newdirname))
download.file( fn , tf , mode = 'wb' )
# wr <- normalizePath( "C:/Program Files/WinRAR/WinRAR.exe" )
# shell( paste0( '"' , wr , '" x ' , tf , ' ' , td ) )
}
}
# check supplementary data in GSE
gse_sup <- unlist(extract_metadata(notes(experimentData(gse)), "supplementary", T))
gse_sup[gse_sup=="NONE"] <- NA # convert NONE to NA
gse_sup <- gse_sup[is.na(gse_sup)==F] # delete NA
gse_sup <- strsplit(gse_sup, "\n")[[1]]
# gse_sup
# check supplementary data in GSMs
gsm_sup <- unlist(extract_metadata(pData(phenoData(gse)), "supplementary", T))
gsm_sup[gsm_sup=="NONE"] <- NA # convert NONE to NA
gsm_sup <- gsm_sup[is.na(gsm_sup)==F] # delete NA
gsm_sup <- unlist(gsm_sup)
# detect where the data is
if (nrow(exprs(gse))>0){
source = "table"
print("Detected data source: as datatable in GSMs")
} else if (length(gse_sup) > 0){
source = "gse_sup"
print("Detected data source: as supplementary file in GSE")
print(paste0("GSE supplementary (",length(gse_sup),"): ", paste(gse_sup, collapse=", ")))
} else if (length(gsm_sup) > 0){
source = "gsm_sup"
print("Detected data source: as supplementary files in GSMs")
print(paste0("GSM supplementary (",length(gsm_sup),"): ", paste(gsm_sup, collapse=", ")))
} else {
source = "none"
print("Data source not detected!")
}
if (source == "table"){
head(exprs(gse))
} else  {
print("Downloading data matrix from the supplementary file(s)...")
newdirname <- paste(notes(experimentData(gse))$geo_accession,
substr(gse_meta_ext$title, 1, 50),
Sys.Date(), sep="-")
dir.create(file.path(getwd(), newdirname), showWarnings = FALSE) # ensure dir exists
# get data from supplementary
for (url in gse_sup){
filename <- rev(strsplit(url, "/")[[1]])[[1]]
fn <- url
tf <- normalizePath(paste0(getwd(), "/", newdirname , "/", filename))
td <- normalizePath(paste0(getwd(), "/", newdirname))
download.file( fn , tf , mode = 'wb' )
# wr <- normalizePath( "C:/Program Files/WinRAR/WinRAR.exe" )
# shell( paste0( '"' , wr , '" x ' , tf , ' ' , td ) )
}
}
newdirname <- paste(notes(experimentData(gse))$geo_accession,
substr(gse_meta_ext$title, 1, 50),
Sys.Date(), sep="-")
dir.create(file.path(getwd(), newdirname), showWarnings = FALSE) # ensure dir exists
# get data from supplementary
for (url in gse_sup){
filename <- rev(strsplit(url, "/")[[1]])[[1]]
fn <- url
tf <- normalizePath(paste0(getwd(), "/", newdirname , "/", filename))
td <- normalizePath(paste0(getwd(), "/", newdirname))
download.file( fn , tf , mode = 'wb' )
# wr <- normalizePath( "C:/Program Files/WinRAR/WinRAR.exe" )
# shell( paste0( '"' , wr , '" x ' , tf , ' ' , td ) )
}
# check supplementary data in GSE
gse_sup <- unlist(extract_metadata(notes(experimentData(gse)), "supplementary", T))
gse_sup[gse_sup=="NONE"] <- NA # convert NONE to NA
gse_sup <- gse_sup[is.na(gse_sup)==F] # delete NA
gse_sup <- strsplit(gse_sup, "\n")[[1]]
# gse_sup
# check supplementary data in GSMs
gsm_sup <- unlist(extract_metadata(pData(phenoData(gse)), "supplementary", T))
gsm_sup[gsm_sup=="NONE"] <- NA # convert NONE to NA
gsm_sup <- gsm_sup[is.na(gsm_sup)==F] # delete NA
gsm_sup <- unlist(gsm_sup)
# detect where the data is
if (nrow(exprs(gse))>0){
source = "table"
print("Detected data source: as datatable in GSMs")
} else if (length(gse_sup) > 0){
source = "gse_sup"
print("Detected data source: as supplementary file in GSE")
print(paste0("GSE supplementary (",length(gse_sup),"): ", paste(gse_sup, collapse=", ")))
} else if (length(gsm_sup) > 0){
source = "gsm_sup"
print("Detected data source: as supplementary files in GSMs")
print(paste0("GSM supplementary (",length(gsm_sup),"): ", paste(gsm_sup, collapse=", ")))
} else {
source = "none"
print("Data source not detected!")
}
if (source == "table"){
head(exprs(gse))
} else  {
print("Downloading data matrix from the supplementary file(s)...")
study_name <- gsub("[[:punct:]]", " ", substr(gse_meta_ext$title, 1, 50))
newdirname <- paste(notes(experimentData(gse))$geo_accession,
study_name,
Sys.Date(), sep="-")
dir.create(file.path(getwd(), newdirname), showWarnings = FALSE) # ensure dir exists
# get data from supplementary
for (url in gse_sup){
filename <- rev(strsplit(url, "/")[[1]])[[1]]
fn <- url
tf <- normalizePath(paste0(getwd(), "/", newdirname , "/", filename))
td <- normalizePath(paste0(getwd(), "/", newdirname))
download.file( fn , tf , mode = 'wb' )
# wr <- normalizePath( "C:/Program Files/WinRAR/WinRAR.exe" )
# shell( paste0( '"' , wr , '" x ' , tf , ' ' , td ) )
}
}
shiny::runApp('GitHub/easyGSEA/DEG_part')
runApp('GitHub/easyGSEA/DEG_part')
runApp('GitHub/easyGSEA/DEG_part')
runApp('GitHub/easyGSEA/DEG_part')
runApp('GitHub/easyGSEA/DEG_part')
runApp('GitHub/easyGSEA/DEG_part')
runApp('GitHub/easyGSEA/DEG_part')
runApp('GitHub/easyGSEA/DEG_part')
runApp('GitHub/easyGSEA/DEG_part')
shiny::runApp('GitHub/easyGSEA/DEG_part')
