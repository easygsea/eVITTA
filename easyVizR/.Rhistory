return (output_value)
# } else {
return (x)
# }
}))
output_vector
}
translate_sample_names(c(pdata$title, "test"),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
# translate vector of e.g. gsm ids, to sample names, etc, provided with the translation df.
translate_sample_names <- function(original_vector, dict_df, output_type){
# try to match vector to every column in dict and get a score
matches <- sort(unlist(lapply(dict_df, function(x){
length(intersect(original_vector, x))
})), decreasing = T)
input_coln <- names(matches)[[1]] # this is the detected input column
# translate according to dict df. if not found, preserve the original value
output_vector <- unlist(lapply(original_vector, function(x){
output_value <- dict_df[dict_df[[input_coln]]==x, output_type]
if (is.null(output_value)==F) {
return (output_value)
} else {
return (x)
}
}))
output_vector
}
translate_sample_names(c(pdata$title, "test"),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
c(pdata$title, "test")
# translate vector of e.g. gsm ids, to sample names, etc, provided with the translation df.
translate_sample_names <- function(original_vector, dict_df, output_type){
# try to match vector to every column in dict and get a score
matches <- sort(unlist(lapply(dict_df, function(x){
length(intersect(original_vector, x))
})), decreasing = T)
input_coln <- names(matches)[[1]] # this is the detected input column
# translate according to dict df. if not found, preserve the original value
output_vector <- unlist(lapply(original_vector, function(x){
output_value <- dict_df[dict_df[[input_coln]]==x, output_type]
if (is.null(output_value)==T) {
return (x)
} else {
return (output_value)
}
}))
output_vector
}
translate_sample_names(c(pdata$title, "test"),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
# translate vector of e.g. gsm ids, to sample names, etc, provided with the translation df.
translate_sample_names <- function(original_vector, dict_df, output_type){
# try to match vector to every column in dict and get a score
matches <- sort(unlist(lapply(dict_df, function(x){
length(intersect(original_vector, x))
})), decreasing = T)
input_coln <- names(matches)[[1]] # this is the detected input column
# translate according to dict df. if not found, preserve the original value
output_vector <- unlist(lapply(original_vector, function(x){
output_value <- dict_df[dict_df[[input_coln]]==x, output_type]
if (is.na(output_value)==T) {
return (x)
} else {
return (output_value)
}
}))
output_vector
}
translate_sample_names(c(pdata$title, "test"),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
# translate vector of e.g. gsm ids, to sample names, etc, provided with the translation df.
translate_sample_names <- function(original_vector, dict_df, output_type){
# try to match vector to every column in dict and get a score
matches <- sort(unlist(lapply(dict_df, function(x){
length(intersect(original_vector, x))
})), decreasing = T)
input_coln <- names(matches)[[1]] # this is the detected input column
# translate according to dict df. if not found, preserve the original value
output_vector <- unlist(lapply(original_vector, function(x){
output_value <- dict_df[dict_df[[input_coln]]==x, output_type]
# if (is.na(output_value)==T) {
#   return (x)
# } else {
return (output_value)
# }
}))
output_vector
}
translate_sample_names(c(pdata$title, "test"),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
# translate vector of e.g. gsm ids, to sample names, etc, provided with the translation df.
translate_sample_names <- function(original_vector, dict_df, output_type){
# try to match vector to every column in dict and get a score
matches <- sort(unlist(lapply(dict_df, function(x){
length(intersect(original_vector, x))
})), decreasing = T)
input_coln <- names(matches)[[1]] # this is the detected input column
# translate according to dict df. if not found, preserve the original value
output_vector <- lapply(original_vector, function(x){
output_value <- dict_df[dict_df[[input_coln]]==x, output_type]
# if (is.na(output_value)==T) {
#   return (x)
# } else {
return (output_value)
# }
})
output_vector
}
translate_sample_names(c(pdata$title, "test"),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
# translate vector of e.g. gsm ids, to sample names, etc, provided with the translation df.
translate_sample_names <- function(original_vector, dict_df, output_type){
# try to match vector to every column in dict and get a score
matches <- sort(unlist(lapply(dict_df, function(x){
length(intersect(original_vector, x))
})), decreasing = T)
input_coln <- names(matches)[[1]] # this is the detected input column
# translate according to dict df. if not found, preserve the original value
output_vector <- unlist(lapply(original_vector, function(x){
output_value <- dict_df[dict_df[[input_coln]]==x, output_type]
if (nchar(output_value)==T) {
return (x)
} else {
return (output_value)
}
}))
output_vector
}
# translate vector of e.g. gsm ids, to sample names, etc, provided with the translation df.
translate_sample_names <- function(original_vector, dict_df, output_type){
# try to match vector to every column in dict and get a score
matches <- sort(unlist(lapply(dict_df, function(x){
length(intersect(original_vector, x))
})), decreasing = T)
input_coln <- names(matches)[[1]] # this is the detected input column
# translate according to dict df. if not found, preserve the original value
output_vector <- unlist(lapply(original_vector, function(x){
output_value <- dict_df[dict_df[[input_coln]]==x, output_type]
if (nchar(output_value)==0) {
return (x)
} else {
return (output_value)
}
}))
output_vector
}
translate_sample_names(c(pdata$title, "test"),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
# translate vector of e.g. gsm ids, to sample names, etc, provided with the translation df.
translate_sample_names <- function(original_vector, dict_df, output_type){
# try to match vector to every column in dict and get a score
matches <- sort(unlist(lapply(dict_df, function(x){
length(intersect(original_vector, x))
})), decreasing = T)
input_coln <- names(matches)[[1]] # this is the detected input column
# translate according to dict df. if not found, preserve the original value
output_vector <- unlist(lapply(original_vector, function(x){
output_value <- dict_df[dict_df[[input_coln]]==x, output_type]
if (identical(a, character(0))) {
return (x)
} else {
return (output_value)
}
}))
output_vector
}
translate_sample_names(c(pdata$title, "test"),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
# translate vector of e.g. gsm ids, to sample names, etc, provided with the translation df.
translate_sample_names <- function(original_vector, dict_df, output_type){
# try to match vector to every column in dict and get a score
matches <- sort(unlist(lapply(dict_df, function(x){
length(intersect(original_vector, x))
})), decreasing = T)
input_coln <- names(matches)[[1]] # this is the detected input column
# translate according to dict df. if not found, preserve the original value
output_vector <- lapply(original_vector, function(x){
output_value <- dict_df[dict_df[[input_coln]]==x, output_type]
if (identical(a, character(0))) {
return (x)
} else {
return (output_value)
}
})
output_vector
}
translate_sample_names(c(pdata$title, "test"),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
# translate vector of e.g. gsm ids, to sample names, etc, provided with the translation df.
translate_sample_names <- function(original_vector, dict_df, output_type){
# try to match vector to every column in dict and get a score
matches <- sort(unlist(lapply(dict_df, function(x){
length(intersect(original_vector, x))
})), decreasing = T)
input_coln <- names(matches)[[1]] # this is the detected input column
# translate according to dict df. if not found, preserve the original value
output_vector <- lapply(original_vector, function(x){
output_value <- dict_df[dict_df[[input_coln]]==x, output_type]
if (identical(x, character(0))) {
return (x)
} else {
return (output_value)
}
})
output_vector
}
translate_sample_names(c(pdata$title, "test"),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
# translate vector of e.g. gsm ids, to sample names, etc, provided with the translation df.
translate_sample_names <- function(original_vector, dict_df, output_type){
# try to match vector to every column in dict and get a score
matches <- sort(unlist(lapply(dict_df, function(x){
length(intersect(original_vector, x))
})), decreasing = T)
input_coln <- names(matches)[[1]] # this is the detected input column
# translate according to dict df. if not found, preserve the original value
output_vector <- lapply(original_vector, function(x){
output_value <- dict_df[dict_df[[input_coln]]==x, output_type]
if (identical(output_value, character(0))) {
return (x)
} else {
return (output_value)
}
})
output_vector
}
translate_sample_names(c(pdata$title, "test"),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
# translate vector of e.g. gsm ids, to sample names, etc, provided with the translation df.
translate_sample_names <- function(original_vector, dict_df, output_type){
# try to match vector to every column in dict and get a score
matches <- sort(unlist(lapply(dict_df, function(x){
length(intersect(original_vector, x))
})), decreasing = T)
input_coln <- names(matches)[[1]] # this is the detected input column
# translate according to dict df. if not found, preserve the original value
output_vector <- unlist(lapply(original_vector, function(x){
output_value <- dict_df[dict_df[[input_coln]]==x, output_type]
if (identical(output_value, character(0))) {
return (x)
} else {
return (output_value)
}
}))
output_vector
}
translate_sample_names(c(pdata$title, "test"),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
# translate vector of e.g. gsm ids, to sample names, etc, provided with the translation df.
# this preserves anything not found as the original
translate_sample_names <- function(original_vector, dict_df, output_type){
# try to match vector to every column in dict and get a score
matches <- sort(unlist(lapply(dict_df, function(x){
length(intersect(original_vector, x))
})), decreasing = T)
input_coln <- names(matches)[[1]] # this is the detected input column
# translate according to dict df. if not found, preserve the original value
output_vector <- unlist(lapply(original_vector, function(x){
output_value <- dict_df[dict_df[[input_coln]]==x, output_type]
if (identical(output_value, character(0))) {
return (x)
} else {
return (output_value)
}
}))
output_vector
}
translate_sample_names(c(pdata$title, "test"),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
translate_sample_names(c(pdata$title, "test", "meow"),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
translate_sample_names(c(pdata$title),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
# example input: "GSM3610107" "GSM3610108" "GSM3610109" "GSM3610110" "GSM3610111"
pdata$title
translate_sample_names(c(pdata$geo_accession),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"geo_accession")
translate_sample_names(c(pdata$geo_accession),  # this is the input vector
pdata[c("title", "geo_accession")],  # this is the
"title")
runApp('GitHub/Darwin/easyGEO')
runApp('GitHub/Darwin/easyGEO')
pdata
as.list(pdata)
pdata$title
names(pdata$title)
pdata$title
runApp('GitHub/Darwin/easyGEO')
nrow(pdata)
runApp('GitHub/Darwin/easyGEO')
pdata[1,]
pdata[1,][-1]
runApp('GitHub/Darwin/easyGEO')
pdata[1,]
unname(unlist(pdata[1,]))
unlist(pdata[1,])
unname(unlist(pdata[1,]))
class(unname(unlist(pdata[1,])))
unname(unlist(pdata[,1]))
runApp('GitHub/Darwin/easyGEO')
shiny::runApp('GitHub/Darwin/easyGEO')
shiny::runApp('GitHub/Darwin/easyVizR')
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp('C:/Users/User/Desktop/Code/R__Shiny/shinywidget_dropdown')
runApp('~/GitHub/Darwin/easyVizR')
runApp('C:/Users/User/Desktop/Code/R__Shiny/shinywidget_dropdown')
runApp('~/GitHub/Darwin/easyVizR')
runApp('C:/Users/User/Desktop/Code/R__Shiny/shinywidget_dropdown')
runApp()
data.frame(element = c(NA, "#stepd1","#stepd2","#stepd3","#stepd4"),
intro = c("In this view you can make visualizations for multiple (n>=2) datasets.",
"Select two or more datasets from loaded data.",
"Data must have enough shared columns and rows.
You can see that information here.",
"Click this button to generate visualizations in the dashboard.",
"Visualizations will be shown in individual panels.
Select options from bottom left corner to customize graphs.")
data.frame(element = c(NA, "#stepd1","#stepd2","#stepd3","#stepd4"),
intro = c("In this view you can make visualizations for multiple (n>=2) datasets.",
"Select two or more datasets from loaded data.",
"Data must have enough shared columns and rows.
You can see that information here.",
"Click this button to generate visualizations in the dashboard.",
"Visualizations will be shown in individual panels.
Select options from bottom left corner to customize graphs.")
data.frame(element = c(NA, "#stepd1","#stepd2","#stepd3","#stepd4"),
intro = c("In this view you can make visualizations for multiple (n>=2) datasets.",
"Select two or more datasets from loaded data.",
"Data must have enough shared columns and rows.
You can see that information here.",
"Click this button to generate visualizations in the dashboard.",
"Visualizations will be shown in individual panels.
Select options from bottom left corner to customize graphs."))
# this is the intro.js tour
data.frame(element = c(NA, "#stepd1","#stepd2","#stepd3","#stepd4"),
intro = c("In this view you can make visualizations for multiple (n>=2) datasets.",
"Select two or more datasets from loaded data.",
"Data must have enough shared columns and rows.
You can see that information here.",
"Click this button to generate visualizations in the dashboard.",
"Visualizations will be shown in individual panels.
Select options from bottom left corner to customize graphs."))
# --------------- Initialize introjs -------------------
intropath <- paste0(getwd(), "/intro/")
filepaths <- list.files(intropath)
print(filepaths)
# --------------- Initialize introjs -------------------
intropath <- paste0(getwd(), "/intro/")
filepaths <- list.files(intropath)
print(filepaths)
for (i in filepaths){
read.csv(i, header=T)
}
filepaths <- list.files(intropath, recursive=T)
print(filepaths)
filepaths <- list.files(intropath, full.names=T)
print(filepaths)
for (i in filepaths){
read.csv(i, header=T)
}
for (i in filepaths){
print(read.csv(i, header=T))
}
for (i in filepaths){
print(read.csv(i, header=T, sep="\t"))
}
intros <- lapply(filepaths, function(x){
print(read.csv(x, header=T, sep="\t"))
})
intros
names(intros) <- list.files(intropath, full.names=F)
intros
names(intros) <- tools::file_path_sans_ext(list.files(intropath, full.names=F))
intros
intros <- lapply(filepaths, function(x){
data.frame(read.csv(x, header=T, sep="\t"))
})
names(intros) <- tools::file_path_sans_ext(list.files(intropath, full.names=F))
intros
# --------------- Initialize introjs -------------------
intropath <- paste0(getwd(), "/intro/")
filepaths <- list.files(intropath, full.names=T)
intros <- lapply(filepaths, function(x){
data.frame(read.csv(x, header=T, sep="\t"))
})
names(intros) <- tools::file_path_sans_ext(list.files(intropath, full.names=F))
intro
intros
runApp()
runApp()
View(intros)
runApp()
runApp()
# this is the intro.js tour
data.frame(element = c(NA, "#stepd1","#stepd2","#stepd3","#stepd4"),
intro = c("In this view you can make visualizations for multiple (n>=2) datasets.",
"Select two or more datasets from loaded data.",
"Data must have enough shared columns and rows.
You can see that information here.",
"Click this button to generate visualizations in the dashboard.",
"Visualizations will be shown in individual panels.
Select options from bottom left corner to customize graphs."))
intros <- lapply(filepaths, function(x){
df <- data.frame(read.csv(x, header=T, sep="\t"))
df$element <- sub("^", "#", df$element )
})
names(intros) <- tools::file_path_sans_ext(list.files(intropath, full.names=F))
rownames(intros) <- NULL
intros
# --------------- Initialize introjs -------------------
intropath <- paste0(getwd(), "/intro/")
filepaths <- list.files(intropath, full.names=T)
intros <- lapply(filepaths, function(x){
df <- data.frame(read.csv(x, header=T, sep="\t"))
df$element[is.na(df$element)==F] <- sub("^", "#", df$element[is.na(df$element)==F])
df
})
names(intros) <- tools::file_path_sans_ext(list.files(intropath, full.names=F))
rownames(intros) <- NULL
intros
# --------------- Initialize introjs -------------------
intropath <- paste0(getwd(), "/intro/")
filepaths <- list.files(intropath, full.names=T)
intros <- lapply(filepaths, function(x){
df <- data.frame(read.csv(x, header=T, sep="\t"))
df[is.na(df$element)==F,"element"] <- sub("^", "#", df[is.na(df$element)==F,"element"])
df
})
names(intros) <- tools::file_path_sans_ext(list.files(intropath, full.names=F))
rownames(intros) <- NULL
intros
# --------------- Initialize introjs -------------------
intropath <- paste0(getwd(), "/intro/")
filepaths <- list.files(intropath, full.names=T)
intros <- lapply(filepaths, function(x){
df <- data.frame(read.csv(x, header=T, sep="\t"))
df$element <- sub("^", "#", df$element)
df[df=="#"] <- NA
})
names(intros) <- tools::file_path_sans_ext(list.files(intropath, full.names=F))
rownames(intros) <- NULL
intros
# --------------- Initialize introjs -------------------
intropath <- paste0(getwd(), "/intro/")
filepaths <- list.files(intropath, full.names=T)
intros <- lapply(filepaths, function(x){
df <- data.frame(read.csv(x, header=T, sep="\t"))
df$element <- sub("^", "#", df$element)
df[df=="#"] <- NA
})
intros
df
# --------------- Initialize introjs -------------------
intropath <- paste0(getwd(), "/intro/")
filepaths <- list.files(intropath, full.names=T)
intros <- lapply(filepaths, function(x){
df <- data.frame(read.csv(x, header=T, sep="\t"))
df$element <- sub("^", "#", df$element)
df[df=="#"] <- NA
df
})
names(intros) <- tools::file_path_sans_ext(list.files(intropath, full.names=F))
rownames(intros) <- NULL
intros
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
